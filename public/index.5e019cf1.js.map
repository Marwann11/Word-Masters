{"mappings":"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","sources":["<anon>","src/js/main.mjs","src/js/modules/userProgress.mjs","src/js/modules/validation.mjs","src/js/helper.mjs","src/js/modules/input.mjs","src/js/modules/animations.mjs","src/js/modules/buttons.mjs","src/js/modules/wordOfTheDay.mjs"],"sourcesContent":["//********************** */\n//* Global variables\n//********************** */\n// loading Element\nconst $f8d8239ac9be2ae9$var$loadingElement = document.body.querySelector(\".loading-container\");\n//****************************************************** */\n//* Main Functions\n//****************************************************** */\n/*\r\n  * cell animation function takes for parameters:\r\n  * rowCells => which is 1 cell or all cells (1 cell for adding and removing, all for validating)\r\n  * keyValue => the value of the pressed key either on user keyboard or virtual one\r\n  * validationArray, keyboardButtons => only used in the enter key to \r\n  * animate when validating in both game board cells and keyboard buttons\r\n*/ function $f8d8239ac9be2ae9$export$2b30b4c5c46f02b8(rowCells, keyValue, validationArray, keyboardButtons) {\n    // unify input\n    keyValue = keyValue.toLowerCase();\n    if (keyValue === \"enter\") {\n        if (validationArray === undefined) $f8d8239ac9be2ae9$var$rejectionAnimation(rowCells);\n        else $f8d8239ac9be2ae9$var$validationAnimation(rowCells, validationArray, keyboardButtons);\n    } else if (keyValue === \"backspace\") $f8d8239ac9be2ae9$var$animateAndRemove(rowCells);\n    else $f8d8239ac9be2ae9$var$addingAnimation(rowCells);\n}\nfunction $f8d8239ac9be2ae9$var$addingAnimation(rowCells) {\n    // find last occupied cell\n    let lastOccupiedCell;\n    for (let cell of rowCells)if (cell.innerText !== \"\") lastOccupiedCell = cell;\n    // choose cell Text Element\n    let cellText = lastOccupiedCell.querySelector(\".letter-text\");\n    // add animations to the cell\n    cellText.classList.add(\"letter-adding\");\n    // remove animations from the cell after specified duration\n    setTimeout(()=>cellText.classList.remove(\"letter-adding\"), 200);\n}\nfunction $f8d8239ac9be2ae9$var$animateAndRemove(rowCells) {\n    let cellText = rowCells.querySelector(\".letter-text\");\n    // add animations to the removed cell\n    cellText.classList.add(\"letter-removing\");\n    // remove occupied cell content\n    setTimeout(()=>cellText.innerText = \"\", 200);\n    // remove animations\n    setTimeout(()=>cellText.classList.remove(\"letter-removing\"), 200);\n}\nfunction $f8d8239ac9be2ae9$var$rejectionAnimation(rowCells) {\n    // Get Cells Parent => (row)\n    let row = rowCells[0].parentNode;\n    // add animation\n    row.classList.add(\"row-rejection\");\n    for (let cell of rowCells)cell.classList.add(\"cell-rejection\");\n    setTimeout(()=>{\n        row.classList.remove(\"row-rejection\");\n        for (let cell of rowCells)cell.classList.remove(\"cell-rejection\");\n    }, 1000);\n}\nfunction $f8d8239ac9be2ae9$var$validationAnimation(rowCells, validationArray, keyboardButtons) {\n    let animationDelay = 0.15;\n    for(let i = 0; i < validationArray.length; i++){\n        // current cell in gameBoard\n        let currentCell = rowCells[i];\n        // find relative keyboard button in virtual keyboard\n        let keyboardButton;\n        for (let button of keyboardButtons)if (button.innerText.toLowerCase() === currentCell.innerText.toLowerCase()) keyboardButton = button;\n        // current relative validation cell value\n        let validationCell = validationArray[i];\n        const currentTheme = document.querySelector(\".switch__checkbox\").getAttribute(\"data-theme\");\n        // animate gameBoard cell\n        currentCell.classList.add(\"game-board-validation\");\n        keyboardButton.classList.add(\"keyboard-validation\");\n        // give different delay between cells and keyboard buttons\n        currentCell.style.animationDelay = `${i * animationDelay}s`;\n        keyboardButton.style.animationDelay = `${i * animationDelay}s`;\n        setTimeout(()=>{\n            if (validationCell === true) {\n                // add default classes\n                currentCell.classList.add(\"game-board__letter--correct\");\n                keyboardButton.classList.add(\"keyboard__letter--correct\");\n                // check for dark theme and apply related classes if so\n                if (currentTheme === \"dark\") {\n                    currentCell.classList.add(\"game-board__letter--correct-dark\");\n                    keyboardButton.classList.add(\"keyboard__letter--correct-dark\");\n                }\n            } else if (validationCell === \"close\") {\n                currentCell.classList.add(\"game-board__letter--close\");\n                keyboardButton.classList.add(\"keyboard__letter--close\");\n                if (currentTheme === \"dark\") {\n                    currentCell.classList.add(\"game-board__letter--close-dark\");\n                    keyboardButton.classList.add(\"keyboard__letter--close-dark\");\n                }\n            } else {\n                currentCell.classList.add(\"game-board__letter--missing\");\n                keyboardButton.classList.add(\"keyboard__letter--missing\");\n                if (currentTheme === \"dark\") {\n                    currentCell.classList.add(\"game-board__letter--missing-dark\");\n                    keyboardButton.classList.add(\"keyboard__letter--missing-dark\");\n                }\n            }\n        }, 500 + i * (animationDelay * 1000));\n        // remove keyboard animation after finishing\n        setTimeout(()=>{\n            keyboardButton.classList.remove(\"keyboard-validation\");\n            keyboardButton.style.removeProperty(\"animation-delay\");\n        }, 1000 + i * (animationDelay * 1000));\n    }\n}\n// function to mimic validation animation for dialog test cells\nfunction $f8d8239ac9be2ae9$export$8be79abfbbb1b7ab(rowCells) {\n    let animationDelay = 150;\n    for(let i = 0; i < rowCells.length; i++){\n        // get current cell\n        let currentCell = rowCells[i];\n        // animate fake cell\n        setTimeout(()=>{\n            currentCell.classList.add(\"game-board-validation\");\n        }, 200 + i * animationDelay);\n        // remove cell animation after finishing\n        setTimeout(()=>{\n            currentCell.classList.remove(\"game-board-validation\");\n        }, 1200 + i * animationDelay);\n    }\n}\nfunction $f8d8239ac9be2ae9$export$5c4515537cbee0e0(keyboardButtons, keyValue) {\n    // set initial variables\n    let pressedButton;\n    let keyLowerCased = keyValue.toLowerCase();\n    // Get corresponding pressed button on keyboard\n    if (keyLowerCased === \"backspace\") {\n        pressedButton = document.querySelector(\".backspace-button\");\n        // Animation\n        pressedButton.classList.add(\"backspace-typing\");\n    } else if (keyLowerCased === \"enter\") {\n        pressedButton = document.querySelector(\".enter-button\");\n        // Animation\n        pressedButton.classList.add(\"enter-typing\");\n    } else {\n        // find relative button on keyboard\n        for (let button of keyboardButtons)/*\r\n        * button text lowercasing is unnecessary for most cases\r\n        * only for stricter checking\r\n      */ if (button.innerHTML.toLowerCase() === keyLowerCased) {\n            pressedButton = button;\n            break;\n        }\n        // Animation\n        pressedButton.classList.add(\"letter-typing\");\n    }\n    // if DOM was changed and the button wasn't found (probably never 😆)\n    if (pressedButton === undefined) {\n        $f8d8239ac9be2ae9$var$fun();\n        return;\n    }\n}\nfunction $f8d8239ac9be2ae9$export$82f1d4313688e804(keyboardButtons, keyValue) {\n    // Get pressed button and unify input\n    let pressedButton;\n    let keyLowerCased = keyValue.toLowerCase();\n    // check cases\n    if (keyLowerCased === \"backspace\") pressedButton = document.querySelector(\".backspace-button\");\n    else if (keyLowerCased === \"enter\") pressedButton = document.querySelector(\".enter-button\");\n    else {\n        for (let button of keyboardButtons)if (button.innerHTML.toLowerCase() === keyLowerCased) {\n            pressedButton = button;\n            break;\n        }\n    }\n    // if other buttons are pressed\n    if (pressedButton === undefined) {\n        $f8d8239ac9be2ae9$var$fun();\n        return;\n    }\n    // remove after animation duration is complete\n    setTimeout(()=>{\n        if (pressedButton.classList.contains(\"backspace-typing\")) pressedButton.classList.remove(\"backspace-typing\");\n        else if (pressedButton.classList.contains(\"enter-typing\")) pressedButton.classList.remove(\"enter-typing\");\n        else if (pressedButton.classList.contains(\"letter-typing\")) pressedButton.classList.remove(\"letter-typing\");\n    }, 150);\n}\nconst $f8d8239ac9be2ae9$var$fun = ()=>{\n    console.log(`Know what the button said to the clicker? \r\n~crying in sadness~ \r\nit just feels like, you're always pushing me away 😢`);\n};\nfunction $f8d8239ac9be2ae9$export$21d6af064bc42dba(dialog) {\n    dialog.classList.add(\"dialog-entry\");\n}\nfunction $f8d8239ac9be2ae9$export$48363b365af47301(dialog) {\n    dialog.classList.remove(\"dialog-entry\");\n    dialog.classList.add(\"dialog-exit\");\n    setTimeout(()=>{\n        dialog.classList.remove(\"dialog-exit\");\n    }, 500);\n}\n//* Function to show loading spinner element\nfunction $f8d8239ac9be2ae9$export$64858b67578a10bb() {\n    $f8d8239ac9be2ae9$var$loadingElement.style.visibility = \"visible\";\n}\n//* Function to hide loading spinner element\nfunction $f8d8239ac9be2ae9$export$7d026bf51c574e0d() {\n    $f8d8239ac9be2ae9$var$loadingElement.style.visibility = \"hidden\";\n}\n\n\n/*\r\n* all input functions returns true only if any change has been made\r\n* eg. added a letter, removed a letter or (pressed enter (has no effect, just for consistency))\r\n*/ function $5ab19e18f0cc9b1e$export$412508d679148d5c(rowCells, key) {\n    // unify input\n    key = key.toLowerCase();\n    // check cases\n    if (key === \"backspace\") return $5ab19e18f0cc9b1e$var$animateAndRemoveLetter(rowCells);\n    else if (key === \"enter\") return true;\n    else if ($5ab19e18f0cc9b1e$var$isLetter(key)) return $5ab19e18f0cc9b1e$var$addLetter(rowCells, key); // add a letter\n}\nfunction $5ab19e18f0cc9b1e$var$addLetter(rowCells, keyValue) {\n    // initial value for last empty cell\n    let lastEmptyCell;\n    // find last empty cell\n    for (let cell of rowCells)if (cell.innerText === \"\") {\n        // set last empty cell and break\n        lastEmptyCell = cell;\n        break;\n    }\n    // if all cells are occupied\n    if (lastEmptyCell === undefined) return false;\n    let emptyCellText = lastEmptyCell.childNodes[0];\n    // add animation and letter to cell\n    emptyCellText.innerText = keyValue.toUpperCase();\n    return true;\n}\n/*\r\n  * animateAndRemoveLetter function is the only function that applies a side effect also in \r\n  * it's declaration (it does the animation in addition to removing the letter) \r\n  * due to the fact that the animation needs to be applied before removing the letter\r\n*/ function $5ab19e18f0cc9b1e$var$animateAndRemoveLetter(rowCells) {\n    // iterate backwards on row\n    for(let i = rowCells.length - 1; i >= 0; i--)// find last occupied cell\n    if (rowCells[i].innerText !== \"\") {\n        // Add animation \n        (0, $f8d8239ac9be2ae9$export$2b30b4c5c46f02b8)(rowCells[i], \"backspace\");\n        break;\n    }\n    return true;\n}\nconst $5ab19e18f0cc9b1e$var$isLetter = (letter)=>{\n    const regex = /^[a-zA-Z]$/;\n    return regex.test(letter);\n};\n\n\n\n\n\n\n//********************* */\n//* Global Variables\n//********************* */\n// settings and howToPlay dialogs\nconst $6ddc67a7c851817b$var$settingsDialog = document.querySelector(\".settings-dialog\");\nconst $6ddc67a7c851817b$var$howToPlayDialog = document.querySelector(\".how-to-play-dialog\");\n// dark mode switch and checkbox and user OS color scheme preference\nconst $6ddc67a7c851817b$var$darkModeSwitch = document.querySelector(\".theme-switch\");\nconst $6ddc67a7c851817b$var$checkbox = $6ddc67a7c851817b$var$darkModeSwitch.querySelector(\".switch__checkbox\");\nlet $6ddc67a7c851817b$var$userPreference = $6ddc67a7c851817b$var$detectPreferredColorScheme();\n// track first theme change\nlet $6ddc67a7c851817b$var$firstThemeChange = true;\n// all the single elements classes needed to apply dark mode\nconst $6ddc67a7c851817b$var$singleElementsClasses = [\n    \"feedback-message\",\n    \"header__title\",\n    \"keyboard\",\n    \"theme-switch\"\n];\n// all the multiple elements classes needed to apply dark mode\nconst $6ddc67a7c851817b$var$singleHyphenElements = [\n    \"game-board__letter--missing\",\n    \"game-board__letter--close\",\n    \"game-board__letter--correct\",\n    \"keyboard__letter--missing\",\n    \"keyboard__letter--close\",\n    \"keyboard__letter--correct\",\n    \"fake-letter--missing\",\n    \"fake-letter--close\",\n    \"fake-letter--correct\"\n];\nconst $6ddc67a7c851817b$var$doubleHyphenElements = [\n    \"game-board__letter\",\n    \"keyboard__letter\",\n    \"row-separator\",\n    \"fake-letter\",\n    \"subheader-text\",\n    \"how-to-play__headings\",\n    \"how-to-play__list\",\n    \"loading-container\",\n    \"loading-spinner\",\n    \"source-notice\"\n];\nconst $6ddc67a7c851817b$var$multipleElementsClasses = [\n    $6ddc67a7c851817b$var$singleHyphenElements,\n    $6ddc67a7c851817b$var$doubleHyphenElements\n];\n// light and dark theme SVG elements\nconst $6ddc67a7c851817b$var$lightThemeSVGs = document.body.querySelectorAll(\".light-theme__svg\");\nconst $6ddc67a7c851817b$var$darkThemeSVGs = document.body.querySelectorAll(\".dark-theme__svg\");\n//************************************* */\n/*********************************\r\n  ** General dialogs Functions\r\n*********************************/ function $6ddc67a7c851817b$export$45f11db5513b93db(dialogName) {\n    if (dialogName === \"settings\") {\n        // add dialog entry animation\n        (0, $f8d8239ac9be2ae9$export$21d6af064bc42dba)($6ddc67a7c851817b$var$settingsDialog);\n        // show dialog and give focus to it\n        $6ddc67a7c851817b$var$settingsDialog.showModal();\n        $6ddc67a7c851817b$var$settingsDialog.focus();\n    } else if (dialogName === \"howToPlay\") {\n        (0, $f8d8239ac9be2ae9$export$21d6af064bc42dba)($6ddc67a7c851817b$var$howToPlayDialog);\n        $6ddc67a7c851817b$var$howToPlayDialog.showModal();\n        $6ddc67a7c851817b$var$howToPlayDialog.focus();\n    }\n    // remove user input event listeners to prevent interaction\n    (0, $d564d07d12776a5d$export$7da0d8f971993eb)();\n    // add an event listener on page for the ESC key and outside the modal box clicks\n    document.addEventListener(\"keydown\", $6ddc67a7c851817b$var$handleEscKeyClick(dialogName));\n    document.addEventListener(\"click\", $6ddc67a7c851817b$var$handleOutsideDialogClick(dialogName));\n}\nfunction $6ddc67a7c851817b$var$closeDialog(dialogName) {\n    if (dialogName === \"settings\") {\n        // Get corresponding dialog button\n        const settingsBtn = document.body.querySelector(\".settings-btn\");\n        // add dialog exit animation\n        (0, $f8d8239ac9be2ae9$export$48363b365af47301)($6ddc67a7c851817b$var$settingsDialog);\n        setTimeout(()=>{\n            // close dialog after animation duration and blur away from the button\n            $6ddc67a7c851817b$var$settingsDialog.close();\n            settingsBtn.blur();\n        }, 450);\n    } else if (dialogName === \"howToPlay\") {\n        const howToPlayBtn = document.body.querySelector(\".how-to-play-btn\");\n        // add dialog exit animation\n        (0, $f8d8239ac9be2ae9$export$48363b365af47301)($6ddc67a7c851817b$var$howToPlayDialog);\n        // close dialog after animation duration\n        setTimeout(()=>{\n            $6ddc67a7c851817b$var$howToPlayDialog.close();\n            howToPlayBtn.blur();\n        }, 450);\n    }\n    // remove both dialog related event listeners\n    document.removeEventListener(\"keydown\", $6ddc67a7c851817b$var$EscKeyDialogEvent);\n    document.removeEventListener(\"click\", $6ddc67a7c851817b$var$outsideDialogAreaEvent);\n    // add user input event listeners to regain interactivity\n    (0, $d564d07d12776a5d$export$9bcec1d37b9fc29c)();\n}\n/*\r\n  * this function handles the press of an ESC key if a dialog is opened\r\n*/ // reference\nlet $6ddc67a7c851817b$var$EscKeyDialogEvent;\nfunction $6ddc67a7c851817b$var$handleEscKeyClick(dialogName) {\n    $6ddc67a7c851817b$var$EscKeyDialogEvent = (ev)=>{\n        if (ev.key === \"Escape\") {\n            // prevent default behavior for ESC key with modal dialogs\n            ev.preventDefault();\n            // close the dialog\n            $6ddc67a7c851817b$var$closeDialog(dialogName);\n        }\n    };\n    return $6ddc67a7c851817b$var$EscKeyDialogEvent;\n}\n/*\r\n  * this function handles mouse clicks outside of the dialog area\r\n*/ // reference\nlet $6ddc67a7c851817b$var$outsideDialogAreaEvent;\nfunction $6ddc67a7c851817b$var$handleOutsideDialogClick(dialogName) {\n    $6ddc67a7c851817b$var$outsideDialogAreaEvent = (ev)=>{\n        if (ev.target instanceof HTMLDialogElement) $6ddc67a7c851817b$var$closeDialog(dialogName);\n    };\n    return $6ddc67a7c851817b$var$outsideDialogAreaEvent;\n}\n/*********************************\r\n  ** Settings dialog Functions\r\n*********************************/ function $6ddc67a7c851817b$export$afc52e0074cd9f19() {\n    const settingsBtn = document.querySelector(\".settings-btn\");\n    const settingsCloseBtn = document.querySelector(\".settings-close\");\n    settingsBtn.addEventListener(\"click\", $6ddc67a7c851817b$var$openSettingsEvent);\n    settingsCloseBtn.addEventListener(\"click\", $6ddc67a7c851817b$var$closeSettingsEvent);\n}\nfunction $6ddc67a7c851817b$var$openSettingsEvent() {\n    $6ddc67a7c851817b$export$45f11db5513b93db(\"settings\");\n}\nfunction $6ddc67a7c851817b$var$closeSettingsEvent() {\n    $6ddc67a7c851817b$var$closeDialog(\"settings\");\n}\n/****************************\r\n  ** Dark mode Functions\r\n****************************/ // detect user preferred color scheme\nfunction $6ddc67a7c851817b$var$detectPreferredColorScheme() {\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    return prefersDark ? \"dark\" : \"light\";\n}\n// initial check to know if a switch to dark theme is needed based on user preference\nfunction $6ddc67a7c851817b$export$c4af5bec915d38ad() {\n    if ($6ddc67a7c851817b$var$userPreference === \"dark\") {\n        // change data-theme attribute to dark mode\n        $6ddc67a7c851817b$var$checkbox.setAttribute(\"data-theme\", \"dark\");\n        // switch to dark theme\n        $6ddc67a7c851817b$var$handleThemeChange();\n        // track change\n        $6ddc67a7c851817b$var$firstThemeChange = false;\n        // click checkbox for correct position of checkbox in dark mode\n        $6ddc67a7c851817b$var$checkbox.click();\n    }\n}\n/*\r\n  * main function for the dark mode button\r\n*/ function $6ddc67a7c851817b$export$5dd67a880f168c58() {\n    // add theme button event listener\n    $6ddc67a7c851817b$var$checkbox.addEventListener(\"click\", $6ddc67a7c851817b$var$handleThemeChange);\n}\n/*\r\n  * main event handler for the dark mode button\r\n*/ function $6ddc67a7c851817b$var$handleThemeChange() {\n    // get current theme\n    let currentTheme = $6ddc67a7c851817b$var$checkbox.getAttribute(\"data-theme\");\n    // get single elements with single class corresponding to them\n    const singleElements = $6ddc67a7c851817b$var$getSingleElements($6ddc67a7c851817b$var$singleElementsClasses);\n    // get multiple elements with single class corresponding to them\n    const multipleElements = $6ddc67a7c851817b$var$getMultipleElements($6ddc67a7c851817b$var$multipleElementsClasses);\n    // if current theme is light or on first theme change\n    if (currentTheme === \"light\" || $6ddc67a7c851817b$var$firstThemeChange === true) $6ddc67a7c851817b$var$addDarkTheme(singleElements, multipleElements);\n    else $6ddc67a7c851817b$var$removeDarkTheme(singleElements, multipleElements);\n}\n/*\r\n  * adding dark mode function to all needed elements\r\n*/ function $6ddc67a7c851817b$var$addDarkTheme(singleElements, multipleElements) {\n    // change checkbox current theme attribute to dark\n    $6ddc67a7c851817b$var$checkbox.setAttribute(\"data-theme\", \"dark\");\n    // handle SVG changes\n    $6ddc67a7c851817b$var$svgChanger($6ddc67a7c851817b$var$lightThemeSVGs, $6ddc67a7c851817b$var$darkThemeSVGs, \"dark\");\n    // add theme to general elements\n    const body = document.body;\n    body.classList.add(\"body--dark\");\n    const header = document.body.querySelector(\"header\");\n    header.classList.add(\"header--dark\");\n    const dialogs = document.body.querySelectorAll(\"dialog\");\n    dialogs.forEach((dialog)=>{\n        dialog.classList.add(\"dialog--dark\");\n    });\n    // add dark mode to single elements using their class\n    if (singleElements.length > 0) $6ddc67a7c851817b$var$handleSingleElements(singleElements, \"add\");\n    // add dark mode classes to each group of elements with a single class\n    if (multipleElements.length > 0) $6ddc67a7c851817b$var$handleMultipleElements(multipleElements, \"add\");\n}\n/*\r\n  * removing dark mode function to all needed elements\r\n*/ function $6ddc67a7c851817b$var$removeDarkTheme(singleElements, multipleElements) {\n    // change checkbox current theme attribute to light\n    $6ddc67a7c851817b$var$checkbox.setAttribute(\"data-theme\", \"light\");\n    // handle SVG changes\n    $6ddc67a7c851817b$var$svgChanger($6ddc67a7c851817b$var$lightThemeSVGs, $6ddc67a7c851817b$var$darkThemeSVGs, \"light\");\n    // remove theme to general elements\n    const body = document.body;\n    body.classList.remove(\"body--dark\");\n    const header = document.body.querySelector(\"header\");\n    header.classList.remove(\"header--dark\");\n    const dialogs = document.body.querySelectorAll(\"dialog\");\n    dialogs.forEach((dialog)=>{\n        dialog.classList.remove(\"dialog--dark\");\n    });\n    // remove dark mode to single elements using their class\n    if (singleElements.length > 0) $6ddc67a7c851817b$var$handleSingleElements(singleElements, \"remove\");\n    // remove dark mode classes to each group of elements with a single class\n    if (multipleElements.length > 0) $6ddc67a7c851817b$var$handleMultipleElements(multipleElements, \"remove\");\n}\n/*\r\n  * Function that takes an array of Elements from the DOM, and based on the method\r\n  * either adds or removes dark mode classes based on the corresponding singleElementsClasses\r\n*/ function $6ddc67a7c851817b$var$handleSingleElements(elements, method) {\n    elements.forEach((elem)=>{\n        for (let elemClass of elem.classList)if ($6ddc67a7c851817b$var$singleElementsClasses.includes(elemClass)) {\n            if (method === \"add\") elem.classList.add(`${elemClass}--dark`);\n            else if (method === \"remove\") elem.classList.remove(`${elemClass}--dark`);\n        }\n    });\n}\n/*\r\n  * Function that takes an array of nodeLists from the DOM, and based on the method\r\n  * either adds or removes dark mode classes based on the corresponding multipleElementsClasses\r\n*/ function $6ddc67a7c851817b$var$handleMultipleElements(elements, method) {\n    elements.forEach((group)=>{\n        // check it's not an empty nodeList\n        if (group.length > 0) group.forEach((child)=>{\n            /* \r\n          * for each element classList check for which classes he have from\r\n          * the multipleElementsClasses array\r\n        */ for (let elemClass of child.classList){\n                // elements classes that needs one hyphen to apply dark mode classes\n                const singleHyphenArr = $6ddc67a7c851817b$var$multipleElementsClasses[0];\n                // elements that needs two hyphens\n                const doubleHyphenArr = $6ddc67a7c851817b$var$multipleElementsClasses[1];\n                if (singleHyphenArr.includes(elemClass)) {\n                    if (method === \"add\") child.classList.add(`${elemClass}-dark`);\n                    else if (method === \"remove\") child.classList.remove(`${elemClass}-dark`);\n                } else if (doubleHyphenArr.includes(elemClass)) {\n                    if (method === \"add\") child.classList.add(`${elemClass}--dark`);\n                    else if (method === \"remove\") child.classList.remove(`${elemClass}--dark`);\n                }\n            }\n        });\n    });\n}\n/*\r\n  * Function that takes as argument an array of class names which are associated with\r\n  * only one element, and returns an array of elements from the DOM\r\n*/ function $6ddc67a7c851817b$var$getSingleElements(singleElementsClasses) {\n    // initial array to store single elements\n    let singleElements = [];\n    // get elements\n    singleElementsClasses.forEach((elem)=>{\n        const element = $6ddc67a7c851817b$var$getElement(elem);\n        singleElements.push(element);\n    });\n    return singleElements;\n}\n/*\r\n  * Function that takes as argument an array of class names which are associated with\r\n  * multiple elements, and returns an array of nodeLists of elements from the DOM\r\n*/ function $6ddc67a7c851817b$var$getMultipleElements(multipleElementsClasses) {\n    // initial array to store multiple elements\n    let multipleElements = [];\n    multipleElementsClasses.forEach((hyphenArr)=>{\n        hyphenArr.forEach((group)=>{\n            const elements = $6ddc67a7c851817b$var$getElements(group);\n            multipleElements.push(elements);\n        });\n    });\n    return multipleElements;\n}\n// Function that takes a class name and returns one element from the DOM\nfunction $6ddc67a7c851817b$var$getElement(elementName) {\n    return document.body.querySelector(`.${elementName}`);\n}\n// Function that takes a class name and returns all associated elements from the DOM\nfunction $6ddc67a7c851817b$var$getElements(elementsName) {\n    return document.body.querySelectorAll(`.${elementsName}`);\n}\n// Function that handles SVG elements and changes them based on the current theme\nfunction $6ddc67a7c851817b$var$svgChanger(lightSVGs, darkSVGs, theme) {\n    if (theme === \"light\") {\n        lightSVGs.forEach((svg)=>{\n            svg.removeAttribute(\"hidden\");\n        });\n        darkSVGs.forEach((svg)=>{\n            svg.setAttribute(\"hidden\", \"true\");\n        });\n    } else if (theme === \"dark\") {\n        darkSVGs.forEach((svg)=>{\n            svg.removeAttribute(\"hidden\");\n        });\n        lightSVGs.forEach((svg)=>{\n            svg.setAttribute(\"hidden\", \"true\");\n        });\n    }\n}\n/***********************************\r\n  ** how to play dialog Functions\r\n***********************************/ function $6ddc67a7c851817b$export$d646718b184468fc() {\n    const howToPlayBtn = document.body.querySelector(\".how-to-play-btn\");\n    const howToPlayCloseBtn = document.body.querySelector(\".how-to-play-close\");\n    howToPlayBtn.addEventListener(\"click\", $6ddc67a7c851817b$var$openHowToPlayEvent);\n    howToPlayCloseBtn.addEventListener(\"click\", $6ddc67a7c851817b$var$closeHowToPlayEvent);\n}\nfunction $6ddc67a7c851817b$var$openHowToPlayEvent() {\n    // open how-to-play dialog\n    $6ddc67a7c851817b$export$45f11db5513b93db(\"howToPlay\");\n    // get fake word row in the dialog\n    const fakeWordRow = document.querySelector(\".fake-game-row\");\n    const fakeWordCells = fakeWordRow.children;\n    // animate the fake row when in viewport\n    $6ddc67a7c851817b$export$601054c55fb8930a(fakeWordRow, fakeWordCells);\n}\nfunction $6ddc67a7c851817b$var$closeHowToPlayEvent() {\n    $6ddc67a7c851817b$var$closeDialog(\"howToPlay\");\n}\n/*\r\n  * Function to observe if the fake word row in settings dialog is in viewport \r\n*/ function $6ddc67a7c851817b$export$601054c55fb8930a(fakeWordRow, fakeWordCells) {\n    //* to avoid repeating animations if scrolled more than once\n    let observationsLeft = 1;\n    // the callback for observer\n    function fakeRowCallback(entries) {\n        entries.forEach((entry)=>{\n            if (entry.isIntersecting && observationsLeft > 0) {\n                observationsLeft--;\n                (0, $f8d8239ac9be2ae9$export$8be79abfbbb1b7ab)(fakeWordCells);\n            }\n        });\n    }\n    // observer options\n    const intersectionOptions = {\n        root: null,\n        rootMargin: \"0px\",\n        threshold: 1\n    };\n    // create a new observer\n    const observer = new IntersectionObserver(fakeRowCallback, intersectionOptions);\n    // observe the fake row\n    observer.observe(fakeWordRow);\n}\n\n\n\n\n\n//****************************************************** */\n//* Main Functions\n//****************************************************** */\nasync function $d6cfc0aabef0aa82$export$a5bfddfac516cc04() {\n    // check if a day has passed since the last session\n    const isNewDay = $d6cfc0aabef0aa82$export$c3e675fb255e6adf();\n    // if first user session or a day has passed\n    if (localStorage.getItem(\"wordOfTheDay\") === null || isNewDay) // initialize a new word in local storage and return it\n    return await $d6cfc0aabef0aa82$var$initNewWord();\n    else return $d6cfc0aabef0aa82$var$decodeWord(localStorage.getItem(\"wordOfTheDay\"));\n}\n//****************************************************** */\n//* Helper Functions\n//****************************************************** */\nasync function $d6cfc0aabef0aa82$var$initNewWord() {\n    // get new word\n    const wordOfTheDay = await $d6cfc0aabef0aa82$var$requestWordOfTheDay();\n    localStorage.setItem(\"wordOfTheDay\", $d6cfc0aabef0aa82$var$encodeWord(wordOfTheDay));\n    return wordOfTheDay;\n}\nasync function $d6cfc0aabef0aa82$var$requestWordOfTheDay() {\n    const promise = fetch(\"https://words.dev-apis.com/word-of-the-day\");\n    return promise.then((response)=>response.json()).then((responseObject)=>responseObject.word).catch(()=>{\n        (0, $50a8fd1ed092fc9a$export$6ec214f034b61612)(`Server error 😐`, false);\n    });\n}\n/*\r\n  * This function compares current day vs day saved in local storage\r\n  * true => if first user session or a day has passed\r\n  * false => if still the same day\r\n*/ function $d6cfc0aabef0aa82$export$c3e675fb255e6adf() {\n    // if first user session\n    const firstSession = $d6cfc0aabef0aa82$var$isDayNotFound();\n    if (firstSession) {\n        // set new date key\n        $d6cfc0aabef0aa82$export$a3ec1d5da0d8ff59();\n        // show how to play On first user session\n        (0, $6ddc67a7c851817b$export$45f11db5513b93db)(\"howToPlay\");\n        // get fake word row in the dialog\n        const fakeWordRow = document.querySelector(\".fake-game-row\");\n        const fakeWordCells = fakeWordRow.children;\n        // animate the fake row when in viewport\n        (0, $6ddc67a7c851817b$export$601054c55fb8930a)(fakeWordRow, fakeWordCells);\n        return true;\n    } else {\n        const todayDate = $d6cfc0aabef0aa82$var$getTodayDate();\n        // compare current day against localStorage saved day\n        return todayDate !== localStorage.getItem(\"currentDay\");\n    }\n}\n// get current day as a string \"day/month/year\" relative to GMT+0000 (UTC) => reset time for word of the day\nfunction $d6cfc0aabef0aa82$var$getTodayDate() {\n    const currentDate = new Date();\n    const currentDay = `${currentDate.getUTCDate()}/${currentDate.getUTCMonth() + 1}/${currentDate.getUTCFullYear()}`;\n    return currentDay;\n}\n// Function to set a new date\nfunction $d6cfc0aabef0aa82$export$a3ec1d5da0d8ff59() {\n    localStorage.setItem(\"currentDay\", $d6cfc0aabef0aa82$var$getTodayDate());\n}\n// Function to remove the current date from the local storage\nfunction $d6cfc0aabef0aa82$export$5f9ade464756e316() {\n    localStorage.removeItem(\"currentDay\");\n}\n/*\r\n  * Function to check if a day key exists in localStorage\r\n  * if not found => return true\r\n  * otherwise => return false\r\n*/ function $d6cfc0aabef0aa82$var$isDayNotFound() {\n    if (localStorage.getItem(\"currentDay\") === null) return true;\n    else return false;\n}\n/*\r\n  * Double functions that handle scrambling the word when stored in local storage\r\n  * and unscrambling it when retrieved\r\n*/ function $d6cfc0aabef0aa82$var$encodeWord(word) {\n    // fake array to add additional characters from to the encoded string\n    const fakeHashArr = [\n        \"!\",\n        \"$\",\n        \"7\",\n        \"&\",\n        \"?\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"/\",\n        \"<\",\n        \"g\",\n        \".\",\n        \"5\",\n        \"i\",\n        \" \",\n        \"9\",\n        \"4\",\n        \"-\",\n        \")\",\n        \"D\",\n        \"T\",\n        \"R\",\n        \"{\",\n        \"}\",\n        \"U\",\n        \"Z\",\n        \"t\",\n        \"K\",\n        \"P\",\n        \"~\",\n        \";\",\n        \"|\",\n        \":\",\n        \"z\",\n        \"V\",\n        \"W\",\n        \"X\",\n        \"+\",\n        \"=\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"@\",\n        \"#\",\n        \"%\",\n        \"3\",\n        \">\",\n        \"^\",\n        \"c\",\n        \"d\"\n    ];\n    const hashArrLen = fakeHashArr.length;\n    // initial value for number of letters in encoded word to each letter from original\n    let addedCharsForLetter = 26;\n    // the index at which resides the real letter\n    const OriginalLetterIndex = 11;\n    let encodedWord = \"\";\n    // for each letter\n    for (let letter of word){\n        // add the additional characters\n        for(let i = 0; i < addedCharsForLetter; i++)if (i === OriginalLetterIndex) encodedWord += String.fromCharCode(letter.charCodeAt(0) - 64);\n        else encodedWord += fakeHashArr[parseInt(Math.random() * 100) % hashArrLen];\n        // arbitrarily increment added chars for next letters\n        addedCharsForLetter += 17;\n    }\n    return encodedWord;\n}\nfunction $d6cfc0aabef0aa82$var$decodeWord(encodedWord) {\n    // initial variables\n    let addedCharsForLetter = 26;\n    const OriginalLetterIndex = 11;\n    let decodedWord = \"\";\n    // array to store each chunk in encodedWord holding a letter\n    let letters = [];\n    // split encoded word until zero letters in length\n    while(encodedWord !== \"\"){\n        letters.push(encodedWord.substring(0, addedCharsForLetter));\n        encodedWord = encodedWord.slice(addedCharsForLetter);\n        addedCharsForLetter += 17;\n    }\n    // add only from the encoding key index\n    for (let letter of letters)decodedWord += String.fromCharCode(letter[OriginalLetterIndex].charCodeAt(0) + 64);\n    return decodedWord;\n}\n\n\n//********************* */\n//* Global Variables\n//********************* */\n// keyboardElement And keyboard buttons\nconst $d564d07d12776a5d$var$keyboardContainer = document.querySelector(\".keyboard\");\nconst $d564d07d12776a5d$var$keyboardBtns = document.querySelectorAll(\".keyboard__letter\");\n// row cells first change state\nlet $d564d07d12776a5d$var$cellsChanged = false;\n//****************************************************** */\n//* Main Functions\n//****************************************************** */\n/*\r\n  * Double Functions which switches application's functionality on and off\r\n*/ function $d564d07d12776a5d$export$9bcec1d37b9fc29c() {\n    $d564d07d12776a5d$var$handleKeyDown();\n    $d564d07d12776a5d$var$handleKeyupEvent();\n    $d564d07d12776a5d$var$handleKeyboardClicks();\n}\nfunction $d564d07d12776a5d$export$7da0d8f971993eb() {\n    document.body.removeEventListener(\"keydown\", $d564d07d12776a5d$var$onKeyDownEvent);\n    document.body.removeEventListener(\"keyup\", $d564d07d12776a5d$var$onKeyUp);\n    $d564d07d12776a5d$var$keyboardContainer.removeEventListener(\"click\", $d564d07d12776a5d$var$keyboardClickEvent);\n}\n/*\r\n  * function that handles all buttons events in the app\r\n*/ function $d564d07d12776a5d$export$cfb94089535b8ca7() {\n    (0, $6ddc67a7c851817b$export$afc52e0074cd9f19)();\n    (0, $6ddc67a7c851817b$export$5dd67a880f168c58)();\n    (0, $6ddc67a7c851817b$export$d646718b184468fc)();\n}\n//****************************************************** */\n//* Helper Functions\n//****************************************************** */\nasync function $d564d07d12776a5d$var$handleKeyDown() {\n    // get current word of the day\n    const wordOfTheDay = await (0, $d6cfc0aabef0aa82$export$a5bfddfac516cc04)();\n    document.body.addEventListener(\"keydown\", $d564d07d12776a5d$var$onKeyDown(wordOfTheDay));\n}\n// reference to keyDown event function\nlet $d564d07d12776a5d$var$onKeyDownEvent;\nfunction $d564d07d12776a5d$var$onKeyDown(wordOfTheDay) {\n    $d564d07d12776a5d$var$onKeyDownEvent = function onKeyDownEvent(ev) {\n        if ((0, $1cc9319a0b1861d3$export$7abfd4649f15e11f).currentRow < 6) {\n            // current active gameBoard row\n            const rowCells = document.querySelectorAll(\".game-board__row\")[(0, $1cc9319a0b1861d3$export$7abfd4649f15e11f).currentRow].children;\n            // pressed key value\n            const key = ev.key;\n            // check if gameBoard values has been changed\n            $d564d07d12776a5d$var$cellsChanged = (0, $5ab19e18f0cc9b1e$export$412508d679148d5c)(rowCells, key);\n            if ($d564d07d12776a5d$var$cellsChanged) {\n                // typing animation only\n                if (key !== \"Backspace\" && key !== \"Enter\") (0, $f8d8239ac9be2ae9$export$2b30b4c5c46f02b8)(rowCells, key);\n                // handle enter key animation in the enter validation block\n                if (key !== \"Enter\") (0, $f8d8239ac9be2ae9$export$5c4515537cbee0e0)($d564d07d12776a5d$var$keyboardBtns, key);\n                // if validation\n                if (key === \"Enter\") {\n                    // check the current focused element\n                    const currentFocusedElement = document.activeElement;\n                    // apply only if the focused element is the body or the Enter button\n                    if (currentFocusedElement instanceof HTMLBodyElement || currentFocusedElement.classList.contains(\".enter-button\")) {\n                        // handle enter keyboard animation\n                        (0, $f8d8239ac9be2ae9$export$5c4515537cbee0e0)($d564d07d12776a5d$var$keyboardBtns, key);\n                        // do a complete validation check\n                        (0, $50a8fd1ed092fc9a$export$e41ca8f156de93e6)(rowCells, $d564d07d12776a5d$var$keyboardBtns, wordOfTheDay);\n                    }\n                }\n            }\n        }\n    };\n    return $d564d07d12776a5d$var$onKeyDownEvent;\n}\nfunction $d564d07d12776a5d$var$handleKeyupEvent() {\n    // releasing user keyboard buttons event\n    document.body.addEventListener(\"keyup\", $d564d07d12776a5d$var$onKeyUp);\n}\nfunction $d564d07d12776a5d$var$onKeyUp(ev) {\n    const key = ev.key;\n    (0, $f8d8239ac9be2ae9$export$82f1d4313688e804)($d564d07d12776a5d$var$keyboardBtns, key);\n}\nasync function $d564d07d12776a5d$var$handleKeyboardClicks() {\n    const wordOfTheDay = await (0, $d6cfc0aabef0aa82$export$a5bfddfac516cc04)();\n    $d564d07d12776a5d$var$keyboardContainer.addEventListener(\"click\", $d564d07d12776a5d$var$onKeyboardClick(wordOfTheDay));\n}\n// reference to the event function (for removal purposes)\nlet $d564d07d12776a5d$var$keyboardClickEvent;\nfunction $d564d07d12776a5d$var$onKeyboardClick(wordOfTheDay) {\n    // store function\n    $d564d07d12776a5d$var$keyboardClickEvent = function keyboardClickEvent(ev) {\n        if ((0, $1cc9319a0b1861d3$export$7abfd4649f15e11f).currentRow < 6) {\n            // current active gameBoard row\n            const rowCells = document.querySelector(\".game-board__row[data-state='TBD']\").children;\n            // current clicked button\n            const clickedButton = ev.target;\n            // if not a button\n            if (!(clickedButton instanceof HTMLButtonElement || clickedButton instanceof HTMLImageElement)) return;\n            if (clickedButton instanceof HTMLImageElement || clickedButton.classList.contains(\"backspace-button\")) $d564d07d12776a5d$var$cellsChanged = (0, $5ab19e18f0cc9b1e$export$412508d679148d5c)(rowCells, \"Backspace\");\n            else if (clickedButton.classList.contains(\"enter-button\")) {\n                $d564d07d12776a5d$var$cellsChanged = (0, $5ab19e18f0cc9b1e$export$412508d679148d5c)(rowCells, \"Enter\");\n                // do a complete validation check\n                (0, $50a8fd1ed092fc9a$export$e41ca8f156de93e6)(rowCells, $d564d07d12776a5d$var$keyboardBtns, wordOfTheDay);\n            } else {\n                $d564d07d12776a5d$var$cellsChanged = (0, $5ab19e18f0cc9b1e$export$412508d679148d5c)(rowCells, clickedButton.innerHTML);\n                if ($d564d07d12776a5d$var$cellsChanged) (0, $f8d8239ac9be2ae9$export$2b30b4c5c46f02b8)(rowCells, clickedButton.innerHTML);\n            }\n            // deFocus from the clicked button\n            clickedButton.blur();\n        }\n    };\n    // return to the currying function\n    return $d564d07d12776a5d$var$keyboardClickEvent;\n}\n\n\n\n\n//********************* */\n//* Global Variables\n//********************* */\n// track on screen feedback\nlet $50a8fd1ed092fc9a$var$feedbackOnScreen = false;\n//****************************************************** */\n//* Main Functions\n//****************************************************** */\n/*\r\n  * Function to display feedback messages on screen\r\n  * message => the message displayed in the feedback element\r\n  * stayOnScreen => boolean indicating whether the feedback will stay on screen or not\r\n  * timeOnScreen => only needed if stayOnScreen is false, to represent the time on screen in seconds before removal\r\n*/ function $50a8fd1ed092fc9a$export$6ec214f034b61612(message, stayOnScreen, timeOnScreen) {\n    const feedbackElement = document.querySelector(\".feedback-message\");\n    feedbackElement.innerHTML = `${message}`;\n    if (!$50a8fd1ed092fc9a$var$feedbackOnScreen) $50a8fd1ed092fc9a$var$displayFeedback(feedbackElement, stayOnScreen, timeOnScreen);\n}\n/*\r\n  * the main Function to handle the full process of validating\r\n    ** Checks if row is complete\r\n    ** assembles the word if complete, otherwise does the corresponding animation\r\n    ** handleValidation => returns false => if word is invalid or on server error\r\n    ** => returns an array of boolean and string values indicating similarity between the two words\r\n    ** handle related animations based on handleValidation return value\r\n    ** in case of a successful validation check, Save game state and check if it's \"game over\"\r\n*/ async function $50a8fd1ed092fc9a$export$e41ca8f156de93e6(rowCells, keyboardBtns, wordOfTheDay) {\n    // check for row completeness\n    let rowComplete = $50a8fd1ed092fc9a$var$rowCheck(rowCells);\n    if (rowComplete) {\n        // show loading indicator\n        (0, $f8d8239ac9be2ae9$export$64858b67578a10bb)();\n        // get user input and handle validation and animation\n        const userInput = $50a8fd1ed092fc9a$var$assembleWord(rowCells);\n        const similarLetters = await $50a8fd1ed092fc9a$var$handleValidation(wordOfTheDay, userInput, rowCells, keyboardBtns);\n        // hide loading indicator\n        (0, $f8d8239ac9be2ae9$export$7d026bf51c574e0d)();\n        if (similarLetters === false) // do invalid word animation\n        (0, $f8d8239ac9be2ae9$export$2b30b4c5c46f02b8)(rowCells, \"enter\");\n        else {\n            // Animate changes to row cells and keyboard buttons based on their similarity\n            (0, $f8d8239ac9be2ae9$export$2b30b4c5c46f02b8)(rowCells, \"enter\", similarLetters, keyboardBtns);\n            // Mark row as completed\n            document.querySelectorAll(\".game-board__row\")[(0, $1cc9319a0b1861d3$export$7abfd4649f15e11f).currentRow].dataset.state = \"DONE\";\n            // save current game state after animations durations has completed\n            setTimeout(()=>{\n                (0, $1cc9319a0b1861d3$export$384cd953322e3851)(rowCells);\n            }, 1200);\n        }\n        // check if game ended\n        if (similarLetters !== false) $50a8fd1ed092fc9a$var$endGameCheck();\n    }\n}\n//****************************************************** */\n//* Helper Functions\n//****************************************************** */\n/*\r\n  * function that displays feedback on the screen\r\n  * elem => takes the feedback element as a first argument\r\n  * stayOnScreen => boolean indicating whether the feedback will stay on screen or not\r\n  * timeInSeconds => elapsed time for each feedback message\r\n*/ function $50a8fd1ed092fc9a$var$displayFeedback(elem, stayOnScreen, timeInSeconds) {\n    // add entry animation\n    elem.classList.add(\"fade-in-feedback\");\n    $50a8fd1ed092fc9a$var$feedbackOnScreen = true;\n    if (!stayOnScreen) {\n        // remove entry animation, apply and remove exit animation\n        setTimeout(()=>{\n            elem.classList.remove(\"fade-in-feedback\");\n            elem.classList.add(\"fade-out-feedback\");\n        }, timeInSeconds * 1000);\n        setTimeout(()=>{\n            elem.classList.remove(\"fade-out-feedback\");\n            $50a8fd1ed092fc9a$var$feedbackOnScreen = false;\n        }, timeInSeconds * 1000 + 500);\n    }\n}\n//* Function that checks if row cells are complete\nfunction $50a8fd1ed092fc9a$var$rowCheck(rowCells) {\n    let rowComplete = false;\n    for(let i = 0; i < rowCells.length; i++)if (rowCells[i].innerText === \"\") {\n        // Give feedback to the user\n        $50a8fd1ed092fc9a$export$6ec214f034b61612(\"Not Enough Letters\", false, 1);\n        // do rejection animation\n        (0, $f8d8239ac9be2ae9$export$2b30b4c5c46f02b8)(rowCells, \"enter\");\n        rowComplete = false;\n        break;\n    } else rowComplete = true;\n    return rowComplete;\n}\n//* Connect row letters into a word\nfunction $50a8fd1ed092fc9a$var$assembleWord(rowCells) {\n    let string = \"\";\n    for (let cell of rowCells)string += cell.textContent;\n    return string;\n}\n/*\r\n  * handleValidation returns:\r\n  * false => in case of invalid user input\r\n  * Array that represents similarity between userInput and word of the day\r\n  * based on index of characters => in case of a valid user input\r\n*/ async function $50a8fd1ed092fc9a$var$handleValidation(wordOfTheDay, userInput) {\n    // if there is no word of the day (i.e Fetch Failed)\n    if (wordOfTheDay === undefined) return false;\n    // Get similar letters between user input and word of the day\n    const similarLetters = await $50a8fd1ed092fc9a$var$compareWords(wordOfTheDay, userInput);\n    // if user input is invalid\n    if (similarLetters === false) return false;\n    else {\n        // check if word is solved\n        for (let letter of similarLetters)if (letter === true) (0, $1cc9319a0b1861d3$export$7abfd4649f15e11f).isSolved = true;\n        else {\n            (0, $1cc9319a0b1861d3$export$7abfd4649f15e11f).isSolved = false;\n            break;\n        }\n        if ((0, $1cc9319a0b1861d3$export$7abfd4649f15e11f).isSolved) {\n            const winFeedbackTime = 2.5;\n            switch((0, $1cc9319a0b1861d3$export$7abfd4649f15e11f).currentRow){\n                case 0:\n                    $50a8fd1ed092fc9a$export$6ec214f034b61612(\"Exceptional\", false, winFeedbackTime);\n                    break;\n                case 1:\n                    $50a8fd1ed092fc9a$export$6ec214f034b61612(\"Incredible\", false, winFeedbackTime);\n                    break;\n                case 2:\n                    $50a8fd1ed092fc9a$export$6ec214f034b61612(\"Impressive\", false, winFeedbackTime);\n                    break;\n                case 3:\n                    $50a8fd1ed092fc9a$export$6ec214f034b61612(\"Great\", false, winFeedbackTime);\n                    break;\n                case 4:\n                    $50a8fd1ed092fc9a$export$6ec214f034b61612(\"Nice\", false, winFeedbackTime);\n                    break;\n                default:\n                    $50a8fd1ed092fc9a$export$6ec214f034b61612(\"Phew\", false, winFeedbackTime);\n            }\n        } else if ((0, $1cc9319a0b1861d3$export$7abfd4649f15e11f).currentRow === 5) $50a8fd1ed092fc9a$export$6ec214f034b61612(`Correct word: ${wordOfTheDay.toUpperCase()}`, true);\n        // return similarLetters\n        return similarLetters;\n    }\n}\n/*\r\n  * This function compares both words (word of the day - user input) for similarity\r\n  * returns false and displays feedback => if user input is an invalid english word\r\n  * returns false => if the isWord function returns undefined\r\n  * returns false => if the words are not equal in length or the word of the day has any invalid characters\r\n  * returns a mixed array of booleans and strings => in case of a valid check\r\n  * with the three values:\r\n    ** true => for characters available in both words at the same position\r\n    ** \"close\" => for characters available in both words at different positions\r\n    ** false => for characters missing from one word compared to the other\r\n*/ async function $50a8fd1ed092fc9a$var$compareWords(wordOfTheDay, userInput) {\n    // check if user input is a valid word\n    const validWord = await $50a8fd1ed092fc9a$var$isWord(userInput);\n    // if invalid word\n    if (validWord === false) {\n        $50a8fd1ed092fc9a$export$6ec214f034b61612(\"Not In Word List\", false, 1.5);\n        return false;\n    } else if (validWord === undefined) return false;\n    // validate input\n    if (/\\d/.test(wordOfTheDay) || wordOfTheDay.length !== userInput.length) {\n        $50a8fd1ed092fc9a$export$6ec214f034b61612(\"Server Error, Enjoy a cookie while we work on it \\uD83D\\uDE19\", true);\n        return false;\n    }\n    // initial similarity between user input and word of the day\n    let similarLetters = Array.from(userInput, ()=>false);\n    // unify input\n    wordOfTheDay = wordOfTheDay.toLowerCase();\n    userInput = userInput.toLowerCase();\n    // check for similarity between letters\n    for(let i = 0; i < wordOfTheDay.length; i++){\n        // find indices of all the letters in userInput that's equal to current\n        let foundIndices = $50a8fd1ed092fc9a$var$findLetterIndices(userInput, wordOfTheDay[i]);\n        // if one occurrence only in userInput\n        if (foundIndices.length === 1) $50a8fd1ed092fc9a$var$handleSingleOccurrence(foundIndices[0], i, similarLetters);\n        else $50a8fd1ed092fc9a$var$handleMultipleOccurrences(foundIndices, i, similarLetters);\n    }\n    return similarLetters;\n}\n/*\r\n  * This function returns an array of all found indices for the second argument (letter)\r\n  * inside of the first argument (word)\r\n*/ function $50a8fd1ed092fc9a$var$findLetterIndices(userInput, wordOfTheDayLetter) {\n    // initial array to track all found indices\n    let foundIndices = [];\n    // check for first occurrence of each user word letter in the word of the day\n    let currentFound = userInput.indexOf(wordOfTheDayLetter);\n    // check for any subsequent occurrences\n    while(currentFound !== -1){\n        foundIndices.push(currentFound);\n        currentFound = userInput.indexOf(wordOfTheDayLetter, currentFound + 1);\n    }\n    return foundIndices;\n}\n/*\r\n  * This function handles single letter occurrence in wordOfTheDay\r\n*/ function $50a8fd1ed092fc9a$var$handleSingleOccurrence(foundIndex, currentIndex, similarLetters) {\n    if (foundIndex === currentIndex) similarLetters[foundIndex] = true;\n    else if (similarLetters[foundIndex] === false) similarLetters[foundIndex] = \"close\";\n}\n/*\r\n  * This function handles multiple letter occurrences in wordOfTheDay\r\n*/ function $50a8fd1ed092fc9a$var$handleMultipleOccurrences(foundIndices, currentIndex, similarLetters) {\n    // initial differences between userInput Indices and current word letter map\n    let indexDifferences = new Map();\n    // get differences\n    foundIndices.forEach((index)=>{\n        const currentIndexDifference = Math.abs(index - currentIndex);\n        indexDifferences.set(`${index}`, currentIndexDifference);\n    });\n    let closestIndex = $50a8fd1ed092fc9a$var$findClosestIndex(indexDifferences);\n    // remove entry (to avoid including in future searches)\n    indexDifferences.delete(closestIndex);\n    if (Number(closestIndex) === currentIndex) similarLetters[closestIndex] = true;\n    else if (similarLetters[closestIndex] === false) similarLetters[closestIndex] = \"close\";\n    else $50a8fd1ed092fc9a$var$handleRemainingDifferences(indexDifferences, similarLetters);\n}\n/*\r\n  * This function return the first index with the lowest difference\r\n*/ function $50a8fd1ed092fc9a$var$findClosestIndex(differencesMap) {\n    // Get closest Index based on smallest difference\n    let minEntry = [\n        ...differencesMap.entries()\n    ].reduce((arr, [index, diff])=>{\n        return diff < arr[1] ? [\n            index,\n            diff\n        ] : arr;\n    }, [\n        null,\n        Infinity\n    ]);\n    return minEntry[0];\n}\n/*\r\n  * This function checks for an unprocessed subsequent letter index\r\n  * either handling it (if found) or exhausting and nulling the differences Map\r\n*/ function $50a8fd1ed092fc9a$var$handleRemainingDifferences(differencesMap, similarLetters) {\n    while(differencesMap.size > 0){\n        // find closest index and delete from future searches\n        let closestIndex = $50a8fd1ed092fc9a$var$findClosestIndex(differencesMap);\n        differencesMap.delete(closestIndex);\n        // if found an unprocessed index handle and break out of loop\n        if (similarLetters[closestIndex] === false) {\n            similarLetters[closestIndex] = \"close\";\n            break;\n        }\n    }\n}\n/*\r\n  * This function check if the user input is a valid word\r\n  * returns undefined => if there is no internet or on API server errors\r\n  * returns true => in case of a valid word\r\n  * returns false => in case of an invalid word\r\n*/ async function $50a8fd1ed092fc9a$var$isWord(word) {\n    // Post to validation API\n    const request = await fetch(\"https://words.dev-apis.com/validate-word\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            \"word\": `${word}`\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Connection\": \"keep-alive\"\n        }\n    }).catch(()=>{\n        $50a8fd1ed092fc9a$export$6ec214f034b61612(\"Server Error, please check your internet connection \\uD83D\\uDE1E\", false, 3);\n    });\n    if (request === undefined) return undefined;\n    // Get Response Object\n    const responseObject = await request.json();\n    return responseObject.validWord;\n}\n/*\r\n  *  Function to check if the word has been solved\r\n    ** removes functionality => if word has been solved\r\n    ** switches to next row => if current row is not last row\r\n*/ function $50a8fd1ed092fc9a$var$endGameCheck() {\n    // update the row\n    if ((0, $1cc9319a0b1861d3$export$7abfd4649f15e11f).isSolved) (0, $d564d07d12776a5d$export$7da0d8f971993eb)();\n    else if ((0, $1cc9319a0b1861d3$export$7abfd4649f15e11f).currentRow < 6) // increment to next row after animations durations has completed\n    setTimeout(()=>{\n        (0, $1cc9319a0b1861d3$export$7abfd4649f15e11f).currentRow++;\n    }, 1200);\n}\n\n\n\n//********************* */\n//* Global Variables\n//********************* */\n// track user progress\nconst $1cc9319a0b1861d3$export$7abfd4649f15e11f = {\n    currentRow: 0,\n    isSolved: false\n};\nconst $1cc9319a0b1861d3$export$af20da7343c4b20b = JSON.parse($1cc9319a0b1861d3$export$ed608b63f17f3f82());\n//****************************************************** */\n//* Main Functions\n//****************************************************** */\n/*\r\n  * Function that retrieves previous user progress or creates new one\r\n  * if first session or a new day => initiate a new userProgress object\r\n  * otherwise => get previous user progress object\r\n*/ function $1cc9319a0b1861d3$export$ed608b63f17f3f82() {\n    if (localStorage.getItem(\"userProgress\") === null || (0, $d6cfc0aabef0aa82$export$c3e675fb255e6adf)()) return $1cc9319a0b1861d3$var$initUserProgress();\n    else return localStorage.getItem(\"userProgress\");\n}\n/*\r\n  * This function saves the current user progress in the local storage\r\n    ** Saves current row number\r\n    ** Saves added cells text and classes\r\n    ** Saves added keyboard buttons classes\r\n    ** tracks if the game has been solved or not\r\n*/ function $1cc9319a0b1861d3$export$384cd953322e3851(rowCells) {\n    // save last finished row number\n    $1cc9319a0b1861d3$export$af20da7343c4b20b.currentRow = $1cc9319a0b1861d3$export$7abfd4649f15e11f.currentRow;\n    // save cells data\n    $1cc9319a0b1861d3$var$saveCellsState(rowCells);\n    // save keyboard data\n    $1cc9319a0b1861d3$var$saveKeyboardState();\n    // save if the user solved the puzzle\n    if ($1cc9319a0b1861d3$export$7abfd4649f15e11f.isSolved) $1cc9319a0b1861d3$export$af20da7343c4b20b.isSolved = true;\n    // push the new game state back to the local storage\n    localStorage.setItem(\"userProgress\", JSON.stringify($1cc9319a0b1861d3$export$af20da7343c4b20b));\n}\n/*\r\n  * This function applies last user session game state\r\n*/ async function $1cc9319a0b1861d3$export$70a369479cdf5432(previousGameState) {\n    // set user current row\n    $1cc9319a0b1861d3$export$7abfd4649f15e11f.currentRow = previousGameState.currentRow + 1;\n    // set if the user solved the game or not\n    $1cc9319a0b1861d3$export$7abfd4649f15e11f.isSolved = previousGameState.isSolved;\n    // set cells to previous state (text - classes)\n    $1cc9319a0b1861d3$var$setPreviousCellsState();\n    // set keyboard button to previous state (classes)\n    $1cc9319a0b1861d3$var$setPreviousKeyboardState();\n    // if user lost at previous session\n    if (previousGameState.currentRow === 5 && !previousGameState.isSolved) {\n        // display correct word\n        const todayWord = await (0, $d6cfc0aabef0aa82$export$a5bfddfac516cc04)();\n        (0, $50a8fd1ed092fc9a$export$6ec214f034b61612)(`Correct word: ${todayWord.toUpperCase()}`, true);\n    } else if (previousGameState.isSolved) {\n        const positions = [\n            \"first\",\n            \"second\",\n            \"third\",\n            \"fourth\",\n            \"fifth\",\n            \"sixth\"\n        ];\n        (0, $50a8fd1ed092fc9a$export$6ec214f034b61612)(`Excellent work!, You solved today's word in the ${positions[previousGameState.currentRow]} row`, true);\n    }\n}\n/*\r\n  * This function removes last user session game state\r\n*/ function $1cc9319a0b1861d3$export$2dc65a8d5a607c9a() {\n    localStorage.removeItem(\"userProgress\");\n}\n//****************************************************** */\n//* Helper Functions\n//****************************************************** */\n/*\r\n  * this function initiates a user progress Object in the local storage and returns it\r\n*/ function $1cc9319a0b1861d3$var$initUserProgress() {\n    // initialize initial variables\n    const totalRows = 6;\n    const totalRowCells = 5;\n    const totalKeyboardBtns = 26;\n    const [rowsData, rowsClasses, keyboardBtnsClasses] = [\n        [],\n        [],\n        []\n    ];\n    // for each row\n    for(let i = 0; i < totalRows; i++){\n        // set initial cells text data\n        rowsData[i] = Array(totalRowCells).fill(\"\");\n        // set initial cells applied classes\n        rowsClasses[i] = Array(totalRowCells).fill(\"\");\n    }\n    // for each keyboard button\n    const allButtons = document.querySelectorAll(\".keyboard__letter:not(.enter-button):not(.backspace-button)\");\n    // set buttons classes initial values\n    for(let i = 0; i < totalKeyboardBtns; i++)keyboardBtnsClasses[i] = [\n        allButtons[i].innerText,\n        \"\"\n    ];\n    /*\r\n    * currentRow => the guess row the user is currently at\r\n    * rowsData => the text data for each cell, with a total of five cells for each row\r\n    * rowsClasses => the applied class for each cell on each row\r\n    * keyboardClasses => the applied class for each keyboard button\r\n    * isSolved => boolean indicating whether the puzzle is solved or not\r\n  */ localStorage.setItem(\"userProgress\", JSON.stringify({\n        currentRow: -1,\n        rowsData: rowsData,\n        rowsClasses: rowsClasses,\n        keyboardClasses: keyboardBtnsClasses,\n        isSolved: false\n    }));\n    return localStorage.getItem(\"userProgress\");\n}\n/*\r\n  * Helper function to set previous cells state (text - classes)\r\n*/ function $1cc9319a0b1861d3$var$setPreviousCellsState() {\n    // set completed rows data and classes to previous game state\n    // get all rows\n    const allRows = document.querySelectorAll(\".game-board__row\");\n    for(let i = 0; i <= $1cc9319a0b1861d3$export$af20da7343c4b20b.currentRow; i++){\n        // get current completed row and his children (cells)\n        const currentRow = allRows[i];\n        const rowChildren = currentRow.children;\n        // mark as done\n        currentRow.setAttribute(\"data-state\", \"DONE\");\n        // for each cell \n        for(let j = 0; j < rowChildren.length; j++){\n            // get current cell and it's span\n            const currentCell = rowChildren[j];\n            const currentCellSpan = currentCell.childNodes[0];\n            // add cell text from previous session to current cell\n            currentCellSpan.innerText = $1cc9319a0b1861d3$export$af20da7343c4b20b.rowsData[i][j];\n            // get the cell class used in the previous session\n            const correspondingCellClass = $1cc9319a0b1861d3$export$af20da7343c4b20b.rowsClasses[i][j];\n            // apply the validation animation to cell\n            currentCell.classList.add(\"game-board-validation\");\n            // add animation duration\n            currentCell.style.animationDelay = `${i * 0.03}s`;\n            // add the color class to the cell\n            currentCell.classList.add(correspondingCellClass);\n        }\n    }\n}\n/*\r\n  * Helper function to set previous keyboard state (classes)\r\n*/ function $1cc9319a0b1861d3$var$setPreviousKeyboardState() {\n    // Get all buttons (without enter and backspace buttons)\n    const allButtons = document.querySelectorAll(\".keyboard__letter:not(.enter-button):not(.backspace-button)\");\n    // iterate over each button\n    for(let i = 0; i < allButtons.length; i++){\n        const currentBtn = allButtons[i];\n        // get corresponding previous class for the current button\n        const btnPreviousClass = $1cc9319a0b1861d3$export$af20da7343c4b20b.keyboardClasses[i][1];\n        // if button has been chosen in previous session\n        if (btnPreviousClass !== \"\") {\n            // apply the validation animation to cell\n            currentBtn.classList.add(\"keyboard-validation\");\n            // add animation duration\n            currentBtn.style.animationDelay = `${i * 0.03}s`;\n            // add the color class to the cell\n            currentBtn.classList.add(btnPreviousClass);\n            // remove animation and delay for future animations\n            setTimeout(()=>{\n                currentBtn.classList.remove(\"keyboard-validation\");\n                currentBtn.style.removeProperty(\"animation-delay\");\n            }, 1000 + i * 30);\n        }\n    }\n}\nfunction $1cc9319a0b1861d3$var$saveCellsState(rowCells) {\n    //* save cells text and classes data\n    const totalRowCells = 5;\n    // for each row cell\n    for(let i = 0; i < totalRowCells; i++){\n        // for each cell in the current row add the corresponding cell text\n        $1cc9319a0b1861d3$export$af20da7343c4b20b.rowsData[$1cc9319a0b1861d3$export$af20da7343c4b20b.currentRow][i] = rowCells[i].childNodes[0].innerText;\n        // save the corresponding cells Classes\n        const cellClasses = rowCells[i].classList;\n        const cellClassGenre = \"game-board__letter--\";\n        if (cellClasses.contains(`${cellClassGenre}correct`)) $1cc9319a0b1861d3$export$af20da7343c4b20b.rowsClasses[$1cc9319a0b1861d3$export$af20da7343c4b20b.currentRow][i] = `${cellClassGenre}correct`;\n        else if (cellClasses.contains(`${cellClassGenre}close`)) $1cc9319a0b1861d3$export$af20da7343c4b20b.rowsClasses[$1cc9319a0b1861d3$export$af20da7343c4b20b.currentRow][i] = `${cellClassGenre}close`;\n        else if (cellClasses.contains(`${cellClassGenre}missing`)) $1cc9319a0b1861d3$export$af20da7343c4b20b.rowsClasses[$1cc9319a0b1861d3$export$af20da7343c4b20b.currentRow][i] = `${cellClassGenre}missing`;\n    }\n}\nfunction $1cc9319a0b1861d3$var$saveKeyboardState() {\n    // total keyboard buttons (without enter and backspace)\n    const totalKeyboardBtns = 26;\n    const keyboardBtns = document.querySelectorAll(\".keyboard__letter:not(.enter-button):not(.backspace-button)\");\n    // save the corresponding keyboard buttons classes\n    const keyboardClassGenre = \"keyboard__letter--\";\n    // add the keyboard buttons classes\n    for(let i = 0; i < totalKeyboardBtns; i++){\n        const currentBtnClasses = keyboardBtns[i].classList;\n        if (currentBtnClasses.contains(`${keyboardClassGenre}correct`)) $1cc9319a0b1861d3$export$af20da7343c4b20b.keyboardClasses[i][1] = `${keyboardClassGenre}correct`;\n        else if (currentBtnClasses.contains(`${keyboardClassGenre}close`)) $1cc9319a0b1861d3$export$af20da7343c4b20b.keyboardClasses[i][1] = `${keyboardClassGenre}close`;\n        else if (currentBtnClasses.contains(`${keyboardClassGenre}missing`)) $1cc9319a0b1861d3$export$af20da7343c4b20b.keyboardClasses[i][1] = `${keyboardClassGenre}missing`;\n    }\n}\n\n\n\n\n\nfunction $bc7cbdf963c5cf2d$var$main() {\n    // check if it's a new day\n    const isNewDay = (0, $d6cfc0aabef0aa82$export$c3e675fb255e6adf)();\n    // if there is a saved game state and a day hasn't passed yet\n    if ((0, $1cc9319a0b1861d3$export$af20da7343c4b20b).currentRow !== -1 && !isNewDay) (0, $1cc9319a0b1861d3$export$70a369479cdf5432)((0, $1cc9319a0b1861d3$export$af20da7343c4b20b));\n    // do an initial dark mode check\n    (0, $6ddc67a7c851817b$export$c4af5bec915d38ad)();\n    // add input functionality if word hasn't been solved yet for the current day\n    if (!(0, $1cc9319a0b1861d3$export$af20da7343c4b20b).isSolved) (0, $d564d07d12776a5d$export$9bcec1d37b9fc29c)();\n    // add buttons event handlers\n    (0, $d564d07d12776a5d$export$cfb94089535b8ca7)();\n    // update day if it's a new day\n    if (isNewDay) {\n        // remove previous date from local storage\n        (0, $d6cfc0aabef0aa82$export$5f9ade464756e316)();\n        // add the new one\n        (0, $d6cfc0aabef0aa82$export$a3ec1d5da0d8ff59)();\n    }\n}\n$bc7cbdf963c5cf2d$var$main();\n\n\n//# sourceMappingURL=index.5e019cf1.js.map\n","import { previousGameState, applyPreviousGameState } from \"./modules/userProgress.mjs\";\r\nimport { initialDarkModeCheck } from \"./modules/buttons.mjs\";\r\nimport { addFunctionality, handleButtonsEvents } from \"./helper.mjs\";\r\nimport { isDayPassed, setNewDate, removeYesterdayDate } from './modules/wordOfTheDay.mjs';\r\n\r\n\r\nfunction main() {\r\n  // check if it's a new day\r\n  const isNewDay = isDayPassed();\r\n  \r\n  // if there is a saved game state and a day hasn't passed yet\r\n  if (previousGameState.currentRow !== -1 && !isNewDay) {\r\n    applyPreviousGameState(previousGameState);\r\n  }\r\n\r\n  // do an initial dark mode check\r\n  initialDarkModeCheck();\r\n\r\n  // add input functionality if word hasn't been solved yet for the current day\r\n  if (!previousGameState.isSolved) {\r\n    addFunctionality();\r\n  }\r\n\r\n  // add buttons event handlers\r\n  handleButtonsEvents();\r\n\r\n  // update day if it's a new day\r\n  if (isNewDay) {\r\n    // remove previous date from local storage\r\n    removeYesterdayDate();\r\n    // add the new one\r\n    setNewDate();\r\n  }\r\n}\r\n\r\nmain();","import { feedbackMessage } from './validation.mjs';\r\nimport { getTodayWord, isDayPassed } from \"./wordOfTheDay.mjs\";\r\n\r\n//********************* */\r\n//* Global Variables\r\n//********************* */\r\n\r\n// track user progress\r\nconst userProgress = {\r\n  currentRow: 0,\r\n  isSolved: false\r\n}\r\n\r\nconst previousGameState = JSON.parse(handlePreviousGameState());\r\n\r\n//****************************************************** */\r\n//* Main Functions\r\n//****************************************************** */\r\n\r\n/*\r\n  * Function that retrieves previous user progress or creates new one\r\n  * if first session or a new day => initiate a new userProgress object\r\n  * otherwise => get previous user progress object\r\n*/\r\nfunction handlePreviousGameState() {\r\n  if (localStorage.getItem(\"userProgress\") === null || isDayPassed()) {\r\n    return initUserProgress();\r\n  } else {\r\n    return localStorage.getItem('userProgress');\r\n  }\r\n}\r\n\r\n/*\r\n  * This function saves the current user progress in the local storage\r\n    ** Saves current row number\r\n    ** Saves added cells text and classes\r\n    ** Saves added keyboard buttons classes\r\n    ** tracks if the game has been solved or not\r\n*/\r\nfunction saveGameState(rowCells) {\r\n  // save last finished row number\r\n  previousGameState.currentRow = userProgress.currentRow;\r\n  // save cells data\r\n  saveCellsState(rowCells);\r\n  // save keyboard data\r\n  saveKeyboardState();\r\n  // save if the user solved the puzzle\r\n  if (userProgress.isSolved) { previousGameState.isSolved = true }\r\n\r\n  // push the new game state back to the local storage\r\n  localStorage.setItem(\"userProgress\", JSON.stringify(previousGameState));\r\n}\r\n\r\n/*\r\n  * This function applies last user session game state\r\n*/\r\nasync function applyPreviousGameState(previousGameState) {\r\n  // set user current row\r\n  userProgress.currentRow = previousGameState.currentRow + 1;\r\n  // set if the user solved the game or not\r\n  userProgress.isSolved = previousGameState.isSolved;\r\n  // set cells to previous state (text - classes)\r\n  setPreviousCellsState();\r\n  // set keyboard button to previous state (classes)\r\n  setPreviousKeyboardState();\r\n\r\n  // if user lost at previous session\r\n  if (previousGameState.currentRow === 5 && (!previousGameState.isSolved)) {\r\n    // display correct word\r\n    const todayWord = await getTodayWord();\r\n    feedbackMessage(`Correct word: ${todayWord.toUpperCase()}`, true);\r\n  } else if (previousGameState.isSolved) {\r\n    const positions = [\"first\", \"second\", \"third\", \"fourth\", \"fifth\", \"sixth\"];\r\n    feedbackMessage(`Excellent work!, You solved today's word in the ${positions[previousGameState.currentRow]} row`, true);\r\n  }\r\n}\r\n\r\n/*\r\n  * This function removes last user session game state\r\n*/\r\nfunction removePreviousGameState() {\r\n  localStorage.removeItem(\"userProgress\");\r\n}\r\n\r\n//****************************************************** */\r\n//* Helper Functions\r\n//****************************************************** */\r\n\r\n/*\r\n  * this function initiates a user progress Object in the local storage and returns it\r\n*/\r\nfunction initUserProgress() {\r\n  // initialize initial variables\r\n  const totalRows = 6;\r\n  const totalRowCells = 5;\r\n  const totalKeyboardBtns = 26;\r\n  const [rowsData, rowsClasses, keyboardBtnsClasses] = [[], [], []];\r\n\r\n  // for each row\r\n  for (let i = 0; i < totalRows; i++) {\r\n    // set initial cells text data\r\n    rowsData[i] = Array(totalRowCells).fill(\"\");\r\n    // set initial cells applied classes\r\n    rowsClasses[i] = Array(totalRowCells).fill(\"\");\r\n  }\r\n\r\n  // for each keyboard button\r\n  const allButtons = document.querySelectorAll(\".keyboard__letter:not(.enter-button):not(.backspace-button)\");\r\n  // set buttons classes initial values\r\n  for (let i = 0; i < totalKeyboardBtns; i++) {\r\n    keyboardBtnsClasses[i] = [allButtons[i].innerText, \"\"];\r\n  }\r\n\r\n  /*\r\n    * currentRow => the guess row the user is currently at\r\n    * rowsData => the text data for each cell, with a total of five cells for each row\r\n    * rowsClasses => the applied class for each cell on each row\r\n    * keyboardClasses => the applied class for each keyboard button\r\n    * isSolved => boolean indicating whether the puzzle is solved or not\r\n  */\r\n  localStorage.setItem(\"userProgress\", JSON.stringify({\r\n    currentRow: -1,\r\n    rowsData: rowsData,\r\n    rowsClasses: rowsClasses,\r\n    keyboardClasses: keyboardBtnsClasses,\r\n    isSolved: false\r\n  }))\r\n\r\n  return localStorage.getItem(\"userProgress\");\r\n}\r\n\r\n/*\r\n  * Helper function to set previous cells state (text - classes)\r\n*/\r\n\r\nfunction setPreviousCellsState() {\r\n  // set completed rows data and classes to previous game state\r\n  // get all rows\r\n  const allRows = document.querySelectorAll(\".game-board__row\");\r\n  for (let i = 0; i <= previousGameState.currentRow; i++) {\r\n    // get current completed row and his children (cells)\r\n    const currentRow = allRows[i];\r\n    const rowChildren = currentRow.children;\r\n    // mark as done\r\n    currentRow.setAttribute(\"data-state\", \"DONE\");\r\n\r\n    // for each cell \r\n    for (let j = 0; j < rowChildren.length; j++) {\r\n      // get current cell and it's span\r\n      const currentCell = rowChildren[j];\r\n      const currentCellSpan = currentCell.childNodes[0];\r\n\r\n      // add cell text from previous session to current cell\r\n      currentCellSpan.innerText = previousGameState.rowsData[i][j];\r\n\r\n      // get the cell class used in the previous session\r\n      const correspondingCellClass = previousGameState.rowsClasses[i][j];\r\n      // apply the validation animation to cell\r\n      currentCell.classList.add(\"game-board-validation\");\r\n      // add animation duration\r\n      currentCell.style.animationDelay = `${i * 0.03}s`;\r\n      // add the color class to the cell\r\n      currentCell.classList.add(correspondingCellClass);\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n  * Helper function to set previous keyboard state (classes)\r\n*/\r\nfunction setPreviousKeyboardState() {\r\n  // Get all buttons (without enter and backspace buttons)\r\n  const allButtons = document.querySelectorAll(\".keyboard__letter:not(.enter-button):not(.backspace-button)\");\r\n\r\n  // iterate over each button\r\n  for (let i = 0; i < allButtons.length; i++) {\r\n    const currentBtn = allButtons[i];\r\n    // get corresponding previous class for the current button\r\n    const btnPreviousClass = previousGameState.keyboardClasses[i][1];\r\n\r\n    // if button has been chosen in previous session\r\n    if (btnPreviousClass !== \"\") {\r\n      // apply the validation animation to cell\r\n      currentBtn.classList.add(\"keyboard-validation\");\r\n      // add animation duration\r\n      currentBtn.style.animationDelay = `${i * 0.03}s`;\r\n      // add the color class to the cell\r\n      currentBtn.classList.add(btnPreviousClass);\r\n\r\n      // remove animation and delay for future animations\r\n      setTimeout(() => {\r\n        currentBtn.classList.remove(\"keyboard-validation\");\r\n        currentBtn.style.removeProperty(\"animation-delay\");\r\n      }, 1000 + (i * (0.03 * 1000)));\r\n    }\r\n  }\r\n}\r\n\r\nfunction saveCellsState(rowCells) {\r\n  //* save cells text and classes data\r\n  const totalRowCells = 5;\r\n  // for each row cell\r\n  for (let i = 0; i < totalRowCells; i++) {\r\n    // for each cell in the current row add the corresponding cell text\r\n    previousGameState.rowsData[previousGameState.currentRow][i] =\r\n      rowCells[i].childNodes[0].innerText;\r\n\r\n    // save the corresponding cells Classes\r\n    const cellClasses = rowCells[i].classList;\r\n    const cellClassGenre = \"game-board__letter--\";\r\n\r\n    if (cellClasses.contains(`${cellClassGenre}correct`)) {\r\n      previousGameState.rowsClasses[previousGameState.currentRow][i] =\r\n        `${cellClassGenre}correct`;\r\n    } else if (cellClasses.contains(`${cellClassGenre}close`)) {\r\n      previousGameState.rowsClasses[previousGameState.currentRow][i] =\r\n        `${cellClassGenre}close`;\r\n    } else if (cellClasses.contains(`${cellClassGenre}missing`)) {\r\n      previousGameState.rowsClasses[previousGameState.currentRow][i] =\r\n        `${cellClassGenre}missing`;\r\n    }\r\n  }\r\n}\r\n\r\nfunction saveKeyboardState() {\r\n  // total keyboard buttons (without enter and backspace)\r\n  const totalKeyboardBtns = 26;\r\n  const keyboardBtns = document.querySelectorAll(\".keyboard__letter:not(.enter-button):not(.backspace-button)\");\r\n\r\n  // save the corresponding keyboard buttons classes\r\n  const keyboardClassGenre = \"keyboard__letter--\"\r\n  // add the keyboard buttons classes\r\n  for (let i = 0; i < totalKeyboardBtns; i++) {\r\n    const currentBtnClasses = keyboardBtns[i].classList;\r\n\r\n    if (currentBtnClasses.contains(`${keyboardClassGenre}correct`)) {\r\n      previousGameState.keyboardClasses[i][1] = `${keyboardClassGenre}correct`;\r\n    } else if (currentBtnClasses.contains(`${keyboardClassGenre}close`)) {\r\n      previousGameState.keyboardClasses[i][1] = `${keyboardClassGenre}close`;\r\n    } else if (currentBtnClasses.contains(`${keyboardClassGenre}missing`)) {\r\n      previousGameState.keyboardClasses[i][1] = `${keyboardClassGenre}missing`;\r\n    }\r\n  }\r\n}\r\n\r\nexport { userProgress, previousGameState, handlePreviousGameState, applyPreviousGameState, saveGameState, removePreviousGameState}","import {removeFunctionality} from \"../helper.mjs\"\r\nimport { cellAnimation, showLoading, hideLoading } from \"./animations.mjs\";\r\nimport {userProgress, saveGameState} from \"./userProgress.mjs\";\r\n\r\n//********************* */\r\n//* Global Variables\r\n//********************* */\r\n\r\n// track on screen feedback\r\nlet feedbackOnScreen = false;\r\n\r\n//****************************************************** */\r\n//* Main Functions\r\n//****************************************************** */\r\n\r\n/*\r\n  * Function to display feedback messages on screen\r\n  * message => the message displayed in the feedback element\r\n  * stayOnScreen => boolean indicating whether the feedback will stay on screen or not\r\n  * timeOnScreen => only needed if stayOnScreen is false, to represent the time on screen in seconds before removal\r\n*/\r\nfunction feedbackMessage(message, stayOnScreen, timeOnScreen) {\r\n  const feedbackElement = document.querySelector(\".feedback-message\");\r\n  feedbackElement.innerHTML = `${message}`;\r\n  if (!feedbackOnScreen) {\r\n    displayFeedback(feedbackElement, stayOnScreen, timeOnScreen);\r\n  }\r\n}\r\n\r\n/*\r\n  * the main Function to handle the full process of validating\r\n    ** Checks if row is complete\r\n    ** assembles the word if complete, otherwise does the corresponding animation\r\n    ** handleValidation => returns false => if word is invalid or on server error\r\n    ** => returns an array of boolean and string values indicating similarity between the two words\r\n    ** handle related animations based on handleValidation return value\r\n    ** in case of a successful validation check, Save game state and check if it's \"game over\"\r\n*/\r\nasync function completeValidationCheck(rowCells, keyboardBtns, wordOfTheDay) {\r\n  // check for row completeness\r\n  let rowComplete = rowCheck(rowCells);\r\n  if (rowComplete) {\r\n    // show loading indicator\r\n    showLoading();\r\n    // get user input and handle validation and animation\r\n    const userInput = assembleWord(rowCells);\r\n    const similarLetters = await handleValidation(wordOfTheDay, userInput, rowCells, keyboardBtns);\r\n    // hide loading indicator\r\n    hideLoading();\r\n    if (similarLetters === false) {\r\n      // do invalid word animation\r\n      cellAnimation(rowCells, \"enter\");\r\n    } else {\r\n      // Animate changes to row cells and keyboard buttons based on their similarity\r\n      cellAnimation(rowCells, \"enter\", similarLetters, keyboardBtns);\r\n      // Mark row as completed\r\n      document.querySelectorAll(\".game-board__row\")[userProgress.currentRow].dataset.state = \"DONE\";\r\n      // save current game state after animations durations has completed\r\n      setTimeout(() => {\r\n        saveGameState(rowCells);\r\n      }, 1200);\r\n    }\r\n    // check if game ended\r\n    if (similarLetters !== false) {\r\n      endGameCheck();\r\n    }\r\n  }\r\n}\r\n\r\n//****************************************************** */\r\n//* Helper Functions\r\n//****************************************************** */\r\n\r\n/*\r\n  * function that displays feedback on the screen\r\n  * elem => takes the feedback element as a first argument\r\n  * stayOnScreen => boolean indicating whether the feedback will stay on screen or not\r\n  * timeInSeconds => elapsed time for each feedback message\r\n*/ \r\nfunction displayFeedback(elem, stayOnScreen, timeInSeconds) {\r\n  // add entry animation\r\n  elem.classList.add(\"fade-in-feedback\");\r\n\r\n  feedbackOnScreen = true;\r\n\r\n  if (!stayOnScreen) {\r\n    // remove entry animation, apply and remove exit animation\r\n    setTimeout(() => {\r\n      elem.classList.remove(\"fade-in-feedback\");\r\n      elem.classList.add(\"fade-out-feedback\");\r\n    }, timeInSeconds * 1000)\r\n    setTimeout(() => {\r\n      elem.classList.remove(\"fade-out-feedback\");\r\n      feedbackOnScreen = false;\r\n    }, (timeInSeconds * 1000) + 500)\r\n  }\r\n}\r\n\r\n//* Function that checks if row cells are complete\r\nfunction rowCheck(rowCells) {\r\n  let rowComplete = false;\r\n  for (let i = 0; i < rowCells.length; i++) {\r\n    if (rowCells[i].innerText === \"\") {\r\n      // Give feedback to the user\r\n      feedbackMessage(\"Not Enough Letters\", false, 1);\r\n      // do rejection animation\r\n      cellAnimation(rowCells, \"enter\");\r\n      rowComplete = false;\r\n      break;\r\n    } else {\r\n      rowComplete = true;\r\n    }\r\n  }\r\n  return rowComplete;\r\n}\r\n\r\n//* Connect row letters into a word\r\nfunction assembleWord(rowCells) {\r\n  let string = \"\";\r\n  for (let cell of rowCells) {\r\n    string += cell.textContent;\r\n  }\r\n  return string;\r\n}\r\n\r\n/*\r\n  * handleValidation returns:\r\n  * false => in case of invalid user input\r\n  * Array that represents similarity between userInput and word of the day\r\n  * based on index of characters => in case of a valid user input\r\n*/\r\nasync function handleValidation(wordOfTheDay, userInput) {\r\n  // if there is no word of the day (i.e Fetch Failed)\r\n  if (wordOfTheDay === undefined) return false;\r\n  // Get similar letters between user input and word of the day\r\n  const similarLetters = await compareWords(wordOfTheDay, userInput);\r\n\r\n  // if user input is invalid\r\n  if (similarLetters === false) {\r\n    return false;\r\n  } else {\r\n    // check if word is solved\r\n    for (let letter of similarLetters) {\r\n      if (letter === true) {\r\n        userProgress.isSolved = true;\r\n      } else {\r\n        userProgress.isSolved = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (userProgress.isSolved) {\r\n      const winFeedbackTime = 2.5;\r\n      switch (userProgress.currentRow) {\r\n        case 0:\r\n          feedbackMessage(\"Exceptional\", false, winFeedbackTime);\r\n          break;\r\n        case 1:\r\n          feedbackMessage(\"Incredible\", false, winFeedbackTime);\r\n          break;\r\n        case 2:\r\n          feedbackMessage(\"Impressive\", false, winFeedbackTime);\r\n          break;\r\n        case 3:\r\n          feedbackMessage(\"Great\", false, winFeedbackTime);\r\n          break;\r\n        case 4:\r\n          feedbackMessage(\"Nice\", false, winFeedbackTime);\r\n          break;\r\n        default:\r\n          feedbackMessage(\"Phew\", false, winFeedbackTime);\r\n      }\r\n    } else {\r\n      if (userProgress.currentRow === 5) {\r\n        feedbackMessage(`Correct word: ${wordOfTheDay.toUpperCase()}`, true);\r\n      }\r\n    }\r\n    // return similarLetters\r\n    return similarLetters;\r\n  }\r\n}\r\n\r\n/*\r\n  * This function compares both words (word of the day - user input) for similarity\r\n  * returns false and displays feedback => if user input is an invalid english word\r\n  * returns false => if the isWord function returns undefined\r\n  * returns false => if the words are not equal in length or the word of the day has any invalid characters\r\n  * returns a mixed array of booleans and strings => in case of a valid check\r\n  * with the three values:\r\n    ** true => for characters available in both words at the same position\r\n    ** \"close\" => for characters available in both words at different positions\r\n    ** false => for characters missing from one word compared to the other\r\n*/\r\nasync function compareWords(wordOfTheDay, userInput) {\r\n  // check if user input is a valid word\r\n  const validWord = await isWord(userInput);\r\n\r\n  // if invalid word\r\n  if (validWord === false) {\r\n    feedbackMessage(\"Not In Word List\", false, 1.5);\r\n    return false;\r\n  } else if (validWord === undefined) {\r\n    return false;\r\n  }\r\n\r\n  // validate input\r\n  if (/\\d/.test(wordOfTheDay) || (wordOfTheDay.length !== userInput.length)) {\r\n    feedbackMessage(\"Server Error, Enjoy a cookie while we work on it 😙\", true);\r\n    return false;\r\n  }\r\n\r\n  // initial similarity between user input and word of the day\r\n  let similarLetters = Array.from(userInput, () => false);\r\n  // unify input\r\n  wordOfTheDay = wordOfTheDay.toLowerCase();\r\n  userInput = userInput.toLowerCase();\r\n\r\n  // check for similarity between letters\r\n  for (let i = 0; i < wordOfTheDay.length; i++) {\r\n    \r\n    // find indices of all the letters in userInput that's equal to current\r\n    let foundIndices = findLetterIndices(userInput, wordOfTheDay[i]);\r\n\r\n    // if one occurrence only in userInput\r\n    if (foundIndices.length === 1) {\r\n      handleSingleOccurrence(foundIndices[0], i, similarLetters);\r\n    } else {\r\n      handleMultipleOccurrences(foundIndices, i, similarLetters);\r\n    }\r\n  }\r\n\r\n  return similarLetters;\r\n}\r\n\r\n/*\r\n  * This function returns an array of all found indices for the second argument (letter)\r\n  * inside of the first argument (word)\r\n*/\r\nfunction findLetterIndices(userInput, wordOfTheDayLetter) {\r\n  // initial array to track all found indices\r\n  let foundIndices = [];\r\n  // check for first occurrence of each user word letter in the word of the day\r\n  let currentFound = userInput.indexOf(wordOfTheDayLetter);\r\n\r\n  // check for any subsequent occurrences\r\n  while (currentFound !== -1) {\r\n    foundIndices.push(currentFound);\r\n    currentFound = userInput.indexOf(wordOfTheDayLetter, currentFound + 1);\r\n  }\r\n  return foundIndices;\r\n}\r\n\r\n/*\r\n  * This function handles single letter occurrence in wordOfTheDay\r\n*/\r\nfunction handleSingleOccurrence(foundIndex, currentIndex, similarLetters) {\r\n  if (foundIndex === currentIndex) {\r\n    similarLetters[foundIndex] = true;\r\n  } else if (similarLetters[foundIndex] === false) {\r\n    similarLetters[foundIndex] = \"close\";\r\n  }\r\n}\r\n\r\n/*\r\n  * This function handles multiple letter occurrences in wordOfTheDay\r\n*/\r\nfunction handleMultipleOccurrences(foundIndices, currentIndex, similarLetters) {\r\n  // initial differences between userInput Indices and current word letter map\r\n  let indexDifferences = new Map();\r\n\r\n  // get differences\r\n  foundIndices.forEach(index => {\r\n    const currentIndexDifference = Math.abs(index - currentIndex);\r\n    indexDifferences.set(`${index}`, currentIndexDifference);\r\n  })\r\n\r\n  let closestIndex = findClosestIndex(indexDifferences);\r\n\r\n  // remove entry (to avoid including in future searches)\r\n  indexDifferences.delete(closestIndex);\r\n\r\n  if (Number(closestIndex) === currentIndex) {\r\n    similarLetters[closestIndex] = true;\r\n  } else {\r\n    if (similarLetters[closestIndex] === false) {\r\n      similarLetters[closestIndex] = \"close\";\r\n    } else {\r\n      handleRemainingDifferences(indexDifferences, similarLetters);\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n  * This function return the first index with the lowest difference\r\n*/\r\nfunction findClosestIndex(differencesMap) {\r\n  // Get closest Index based on smallest difference\r\n  let minEntry = [...differencesMap.entries()].reduce((arr, [index, diff]) => {\r\n    return diff < arr[1] ? [index, diff] : arr;\r\n  }, [null, Infinity]);\r\n\r\n  return minEntry[0];\r\n}\r\n\r\n/*\r\n  * This function checks for an unprocessed subsequent letter index\r\n  * either handling it (if found) or exhausting and nulling the differences Map\r\n*/\r\nfunction handleRemainingDifferences(differencesMap, similarLetters) {\r\n  while (differencesMap.size > 0) {\r\n    // find closest index and delete from future searches\r\n    let closestIndex = findClosestIndex(differencesMap);\r\n    differencesMap.delete(closestIndex);\r\n\r\n    // if found an unprocessed index handle and break out of loop\r\n    if (similarLetters[closestIndex] === false) {\r\n      similarLetters[closestIndex] = \"close\";\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n  * This function check if the user input is a valid word\r\n  * returns undefined => if there is no internet or on API server errors\r\n  * returns true => in case of a valid word\r\n  * returns false => in case of an invalid word\r\n*/\r\nasync function isWord(word) {\r\n  // Post to validation API\r\n  const request = await fetch(\"https://words.dev-apis.com/validate-word\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify({\r\n      \"word\": `${word}`,\r\n    }),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Connection\": \"keep-alive\",\r\n    }\r\n  }).catch(() => {\r\n    feedbackMessage(\"Server Error, please check your internet connection 😞\", false, 3);\r\n  });\r\n\r\n  if (request === undefined) { // API error\r\n    return undefined;\r\n  }\r\n\r\n  // Get Response Object\r\n  const responseObject = await request.json();\r\n  return responseObject.validWord;\r\n}\r\n\r\n/*\r\n  *  Function to check if the word has been solved\r\n    ** removes functionality => if word has been solved\r\n    ** switches to next row => if current row is not last row\r\n*/\r\n\r\nfunction endGameCheck() {\r\n  // update the row\r\n  if (userProgress.isSolved) {\r\n    removeFunctionality();\r\n  } else if (userProgress.currentRow < 6) {\r\n    // increment to next row after animations durations has completed\r\n    setTimeout(() => {\r\n      userProgress.currentRow++;\r\n    }, 1200);\r\n  }\r\n}\r\n\r\nexport {completeValidationCheck, feedbackMessage};","import { handleInput } from './modules/input.mjs';\r\nimport { cellAnimation, keyboardAnimation, removeKeyboardAnimations } from './modules/animations.mjs';\r\nimport { completeValidationCheck } from './modules/validation.mjs';\r\nimport { handleSettingsButton, handleThemeButton, handleHowToPlayButton } from './modules/buttons.mjs';\r\nimport { userProgress } from './modules/userProgress.mjs';\r\nimport { getTodayWord } from './modules/wordOfTheDay.mjs';\r\n\r\n//********************* */\r\n//* Global Variables\r\n//********************* */\r\n// keyboardElement And keyboard buttons\r\nconst keyboardContainer = document.querySelector(\".keyboard\");\r\nconst keyboardBtns = document.querySelectorAll(\".keyboard__letter\");\r\n\r\n// row cells first change state\r\nlet cellsChanged = false;\r\n\r\n//****************************************************** */\r\n//* Main Functions\r\n//****************************************************** */\r\n\r\n/*\r\n  * Double Functions which switches application's functionality on and off\r\n*/\r\nfunction addFunctionality() {\r\n  handleKeyDown();\r\n  handleKeyupEvent();\r\n  handleKeyboardClicks();\r\n}\r\n\r\nfunction removeFunctionality() {\r\n  document.body.removeEventListener(\"keydown\", onKeyDownEvent);\r\n  document.body.removeEventListener(\"keyup\", onKeyUp);\r\n  keyboardContainer.removeEventListener(\"click\", keyboardClickEvent);\r\n}\r\n\r\n/*\r\n  * function that handles all buttons events in the app\r\n*/\r\nfunction handleButtonsEvents() {\r\n  handleSettingsButton();\r\n  handleThemeButton();\r\n  handleHowToPlayButton();\r\n}\r\n\r\n//****************************************************** */\r\n//* Helper Functions\r\n//****************************************************** */\r\nasync function handleKeyDown() {\r\n  // get current word of the day\r\n  const wordOfTheDay = await getTodayWord();\r\n  document.body.addEventListener(\"keydown\", onKeyDown(wordOfTheDay));\r\n}\r\n\r\n// reference to keyDown event function\r\nlet onKeyDownEvent;\r\n\r\nfunction onKeyDown(wordOfTheDay) {\r\n  onKeyDownEvent = function onKeyDownEvent(ev) {\r\n    if (userProgress.currentRow < 6) {\r\n      // current active gameBoard row\r\n      const rowCells = document.querySelectorAll(\".game-board__row\")[userProgress.currentRow].children;\r\n      // pressed key value\r\n      const key = ev.key;\r\n      // check if gameBoard values has been changed\r\n      cellsChanged = handleInput(rowCells, key);\r\n    \r\n      if (cellsChanged) {\r\n        // typing animation only\r\n        if (key !== \"Backspace\" && key !== \"Enter\") cellAnimation(rowCells, key);\r\n    \r\n        // handle enter key animation in the enter validation block\r\n        if (key !== \"Enter\") {\r\n          keyboardAnimation(keyboardBtns, key);\r\n        }\r\n    \r\n        // if validation\r\n        if (key === \"Enter\") {\r\n          // check the current focused element\r\n          const currentFocusedElement = document.activeElement;\r\n          // apply only if the focused element is the body or the Enter button\r\n          if (currentFocusedElement instanceof HTMLBodyElement ||\r\n            currentFocusedElement.classList.contains(\".enter-button\")) {\r\n            // handle enter keyboard animation\r\n            keyboardAnimation(keyboardBtns, key);\r\n            // do a complete validation check\r\n            completeValidationCheck(rowCells, keyboardBtns, wordOfTheDay);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return onKeyDownEvent;\r\n}\r\n\r\n\r\nfunction handleKeyupEvent() {\r\n  // releasing user keyboard buttons event\r\n  document.body.addEventListener(\"keyup\", onKeyUp);\r\n}\r\n\r\nfunction onKeyUp(ev) {\r\n  const key = ev.key;\r\n  removeKeyboardAnimations(keyboardBtns, key);\r\n}\r\n\r\nasync function handleKeyboardClicks() {\r\n  const wordOfTheDay = await getTodayWord();\r\n  keyboardContainer.addEventListener(\"click\", onKeyboardClick(wordOfTheDay));\r\n}\r\n\r\n// reference to the event function (for removal purposes)\r\nlet keyboardClickEvent;\r\n\r\nfunction onKeyboardClick(wordOfTheDay) {\r\n  // store function\r\n  keyboardClickEvent = function keyboardClickEvent(ev) {\r\n    if (userProgress.currentRow < 6) {\r\n      // current active gameBoard row\r\n      const rowCells = document.querySelector(\".game-board__row[data-state='TBD']\").children;\r\n      // current clicked button\r\n      const clickedButton = ev.target;\r\n    \r\n      // if not a button\r\n      if (!(clickedButton instanceof HTMLButtonElement || clickedButton instanceof HTMLImageElement)) {\r\n        return;\r\n      }\r\n    \r\n      if (clickedButton instanceof HTMLImageElement || clickedButton.classList.contains(\"backspace-button\")) { // if Deleting letters (Backspace)\r\n        cellsChanged = handleInput(rowCells, \"Backspace\");\r\n      } else if (clickedButton.classList.contains(\"enter-button\")) { // if Validating (Enter)\r\n        cellsChanged = handleInput(rowCells, \"Enter\");\r\n        // do a complete validation check\r\n        completeValidationCheck(rowCells, keyboardBtns, wordOfTheDay);\r\n      } else { // for other buttons\r\n        cellsChanged = handleInput(rowCells, clickedButton.innerHTML);\r\n    \r\n        if (cellsChanged) cellAnimation(rowCells, clickedButton.innerHTML);\r\n      }\r\n    \r\n      // deFocus from the clicked button\r\n      clickedButton.blur();\r\n    }\r\n  }\r\n  // return to the currying function\r\n  return keyboardClickEvent;\r\n}\r\n\r\n//* Export functions \r\nexport { addFunctionality, removeFunctionality, handleButtonsEvents }","import {cellAnimation} from './animations.mjs'\r\n\r\n/*\r\n* all input functions returns true only if any change has been made\r\n* eg. added a letter, removed a letter or (pressed enter (has no effect, just for consistency))\r\n*/\r\n\r\nfunction handleInput(rowCells, key) {\r\n  // unify input\r\n  key = key.toLowerCase();\r\n  // check cases\r\n  if (key === \"backspace\") { // remove a letter\r\n    return animateAndRemoveLetter(rowCells);\r\n  } else if (key === \"enter\") { // skip enter and return true\r\n    return true;\r\n  } else if (isLetter(key)) return addLetter(rowCells, key); // add a letter\r\n}\r\n\r\nfunction addLetter(rowCells, keyValue) {\r\n  // initial value for last empty cell\r\n  let lastEmptyCell;\r\n\r\n  // find last empty cell\r\n  for (let cell of rowCells) {\r\n    if (cell.innerText === \"\") {\r\n      // set last empty cell and break\r\n      lastEmptyCell = cell;\r\n      break;\r\n    }\r\n  }\r\n\r\n  // if all cells are occupied\r\n  if (lastEmptyCell === undefined) return false;\r\n\r\n  let emptyCellText = lastEmptyCell.childNodes[0];\r\n  // add animation and letter to cell\r\n  emptyCellText.innerText = keyValue.toUpperCase();\r\n  return true;\r\n}\r\n\r\n/*\r\n  * animateAndRemoveLetter function is the only function that applies a side effect also in \r\n  * it's declaration (it does the animation in addition to removing the letter) \r\n  * due to the fact that the animation needs to be applied before removing the letter\r\n*/\r\n\r\nfunction animateAndRemoveLetter(rowCells) {\r\n  // iterate backwards on row\r\n  for (let i = rowCells.length - 1; i >= 0; i--) {\r\n    // find last occupied cell\r\n    if (rowCells[i].innerText !== \"\") {\r\n      // Add animation \r\n      cellAnimation(rowCells[i], \"backspace\");\r\n      break;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nconst isLetter = (letter) => {\r\n  const regex = /^[a-zA-Z]$/;\r\n  return regex.test(letter);\r\n}\r\n\r\nexport {handleInput}","//********************** */\r\n//* Global variables\r\n//********************** */\r\n\r\n// loading Element\r\nconst loadingElement = document.body.querySelector(\".loading-container\");\r\n\r\n//****************************************************** */\r\n//* Main Functions\r\n//****************************************************** */\r\n\r\n/*\r\n  * cell animation function takes for parameters:\r\n  * rowCells => which is 1 cell or all cells (1 cell for adding and removing, all for validating)\r\n  * keyValue => the value of the pressed key either on user keyboard or virtual one\r\n  * validationArray, keyboardButtons => only used in the enter key to \r\n  * animate when validating in both game board cells and keyboard buttons\r\n*/\r\n\r\nfunction cellAnimation(rowCells, keyValue, validationArray, keyboardButtons) {\r\n  // unify input\r\n  keyValue = keyValue.toLowerCase();\r\n\r\n  if (keyValue === \"enter\") { // if validating input\r\n    if (validationArray === undefined) {\r\n      rejectionAnimation(rowCells);\r\n    } else {\r\n      validationAnimation(rowCells, validationArray, keyboardButtons);\r\n    }\r\n  } else if (keyValue === \"backspace\") { // if deleting letters\r\n    animateAndRemove(rowCells);\r\n  } else {\r\n    addingAnimation(rowCells);\r\n  }\r\n}\r\n\r\nfunction addingAnimation(rowCells) {\r\n  // find last occupied cell\r\n  let lastOccupiedCell;\r\n  for (let cell of rowCells) if (cell.innerText !== \"\") lastOccupiedCell = cell\r\n  \r\n  // choose cell Text Element\r\n  let cellText = lastOccupiedCell.querySelector(\".letter-text\");\r\n  // add animations to the cell\r\n  cellText.classList.add(\"letter-adding\");\r\n  // remove animations from the cell after specified duration\r\n  setTimeout(() => cellText.classList.remove(\"letter-adding\"), 200);\r\n}\r\n\r\nfunction animateAndRemove(rowCells) {\r\n  let cellText = rowCells.querySelector(\".letter-text\");\r\n  // add animations to the removed cell\r\n  cellText.classList.add(\"letter-removing\");\r\n  // remove occupied cell content\r\n  setTimeout(() => cellText.innerText = \"\", 200);\r\n  // remove animations\r\n  setTimeout(() => cellText.classList.remove(\"letter-removing\"), 200);\r\n}\r\n\r\nfunction rejectionAnimation(rowCells) {\r\n  // Get Cells Parent => (row)\r\n  let row = rowCells[0].parentNode;\r\n  // add animation\r\n  row.classList.add(\"row-rejection\");\r\n  for (let cell of rowCells) cell.classList.add(\"cell-rejection\");\r\n  setTimeout(() => {\r\n    row.classList.remove(\"row-rejection\");\r\n    for (let cell of rowCells) cell.classList.remove(\"cell-rejection\");\r\n  }, 1000);\r\n}\r\n\r\nfunction validationAnimation(rowCells, validationArray, keyboardButtons) {\r\n  let animationDelay = 0.15;\r\n  for (let i = 0; i < validationArray.length; i++) {\r\n    // current cell in gameBoard\r\n    let currentCell = rowCells[i];\r\n    // find relative keyboard button in virtual keyboard\r\n    let keyboardButton;\r\n    for (let button of keyboardButtons) {\r\n      if (button.innerText.toLowerCase() === currentCell.innerText.toLowerCase()) {\r\n        keyboardButton = button;\r\n      }\r\n    }\r\n    // current relative validation cell value\r\n    let validationCell = validationArray[i];\r\n    const currentTheme = document.querySelector(\".switch__checkbox\").getAttribute(\"data-theme\");\r\n\r\n    // animate gameBoard cell\r\n    currentCell.classList.add(\"game-board-validation\");\r\n    keyboardButton.classList.add(\"keyboard-validation\");\r\n    // give different delay between cells and keyboard buttons\r\n    currentCell.style.animationDelay = `${i * animationDelay}s`;\r\n    keyboardButton.style.animationDelay = `${i * animationDelay}s`;\r\n    setTimeout(() => {\r\n      if (validationCell === true) {\r\n        // add default classes\r\n        currentCell.classList.add(\"game-board__letter--correct\");\r\n        keyboardButton.classList.add(\"keyboard__letter--correct\");\r\n\r\n        // check for dark theme and apply related classes if so\r\n        if (currentTheme === \"dark\") {\r\n          currentCell.classList.add(\"game-board__letter--correct-dark\");\r\n          keyboardButton.classList.add(\"keyboard__letter--correct-dark\");\r\n        }\r\n      } else if (validationCell === \"close\") {\r\n        currentCell.classList.add(\"game-board__letter--close\");\r\n        keyboardButton.classList.add(\"keyboard__letter--close\");\r\n\r\n        if (currentTheme === \"dark\") {\r\n          currentCell.classList.add(\"game-board__letter--close-dark\");\r\n          keyboardButton.classList.add(\"keyboard__letter--close-dark\");\r\n        }\r\n      } else {\r\n        currentCell.classList.add(\"game-board__letter--missing\");\r\n        keyboardButton.classList.add(\"keyboard__letter--missing\");\r\n\r\n        if (currentTheme === \"dark\") {\r\n          currentCell.classList.add(\"game-board__letter--missing-dark\");\r\n          keyboardButton.classList.add(\"keyboard__letter--missing-dark\");\r\n        }\r\n      }\r\n    }, 500 + (i * (animationDelay * 1000)));\r\n\r\n    // remove keyboard animation after finishing\r\n    setTimeout(() => {\r\n      keyboardButton.classList.remove(\"keyboard-validation\");\r\n      keyboardButton.style.removeProperty(\"animation-delay\");\r\n    }, 1000 + (i * (animationDelay * 1000)));\r\n  }\r\n}\r\n\r\n// function to mimic validation animation for dialog test cells\r\nfunction fakeValidationAnimation(rowCells) {\r\n  let animationDelay = 150;\r\n  \r\n  for (let i = 0; i < rowCells.length; i++) {\r\n    // get current cell\r\n    let currentCell = rowCells[i];\r\n\r\n    // animate fake cell\r\n    setTimeout(() => {\r\n      currentCell.classList.add(\"game-board-validation\");\r\n    }, 200 + (i * (animationDelay)))\r\n\r\n    // remove cell animation after finishing\r\n    setTimeout(() => {\r\n      currentCell.classList.remove(\"game-board-validation\")\r\n    }, 1200 + (i * (animationDelay)));\r\n  }\r\n}\r\n\r\nfunction keyboardAnimation(keyboardButtons, keyValue) {\r\n  // set initial variables\r\n  let pressedButton;\r\n  let keyLowerCased = keyValue.toLowerCase();\r\n\r\n  // Get corresponding pressed button on keyboard\r\n  if (keyLowerCased === \"backspace\") { //* if removing a letter\r\n    pressedButton = document.querySelector(\".backspace-button\");\r\n    // Animation\r\n    pressedButton.classList.add(\"backspace-typing\");\r\n  } else if (keyLowerCased === \"enter\") { //* if submitting a guess\r\n    pressedButton = document.querySelector(\".enter-button\");\r\n    // Animation\r\n    pressedButton.classList.add(\"enter-typing\");\r\n  } else { //* if adding a letter\r\n    // find relative button on keyboard\r\n    for (let button of keyboardButtons) { //* for other letters\r\n      /*\r\n        * button text lowercasing is unnecessary for most cases\r\n        * only for stricter checking\r\n      */\r\n      if (button.innerHTML.toLowerCase() === keyLowerCased) {\r\n        pressedButton = button;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Animation\r\n    pressedButton.classList.add(\"letter-typing\");\r\n  }\r\n\r\n  // if DOM was changed and the button wasn't found (probably never 😆)\r\n  if (pressedButton === undefined) { fun(); return; }\r\n}\r\n\r\nfunction removeKeyboardAnimations(keyboardButtons, keyValue) {\r\n  // Get pressed button and unify input\r\n  let pressedButton;\r\n  let keyLowerCased = keyValue.toLowerCase();\r\n  // check cases\r\n  if (keyLowerCased === \"backspace\") {\r\n    pressedButton = document.querySelector(\".backspace-button\");\r\n  } else if (keyLowerCased === \"enter\") {\r\n    pressedButton = document.querySelector(\".enter-button\");\r\n  } else {\r\n    for (let button of keyboardButtons) {\r\n      if (button.innerHTML.toLowerCase() === keyLowerCased) {\r\n        pressedButton = button;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // if other buttons are pressed\r\n  if (pressedButton === undefined) { fun(); return; }\r\n\r\n  // remove after animation duration is complete\r\n  setTimeout(() => {\r\n    if (pressedButton.classList.contains(\"backspace-typing\")) {\r\n      pressedButton.classList.remove(\"backspace-typing\");\r\n    } else if (pressedButton.classList.contains(\"enter-typing\")) {\r\n      pressedButton.classList.remove(\"enter-typing\");\r\n    } else if (pressedButton.classList.contains(\"letter-typing\")) {\r\n      pressedButton.classList.remove(\"letter-typing\");\r\n    }\r\n  }, 150);\r\n}\r\n\r\nconst fun = () => {\r\n  console.log(`Know what the button said to the clicker? \r\n~crying in sadness~ \r\nit just feels like, you're always pushing me away 😢`);\r\n}\r\n\r\nfunction dialogsEntryAnimation(dialog) {\r\n  dialog.classList.add(\"dialog-entry\");\r\n}\r\n\r\nfunction dialogsExitAnimation(dialog) {\r\n  dialog.classList.remove(\"dialog-entry\");\r\n  dialog.classList.add(\"dialog-exit\");\r\n  setTimeout(() => {\r\n    dialog.classList.remove(\"dialog-exit\");\r\n  }, 500)\r\n}\r\n\r\n//* Function to show loading spinner element\r\nfunction showLoading() {\r\n  loadingElement.style.visibility = \"visible\";\r\n}\r\n//* Function to hide loading spinner element\r\nfunction hideLoading() {\r\n  loadingElement.style.visibility = \"hidden\";\r\n}\r\n\r\nexport {cellAnimation, keyboardAnimation, removeKeyboardAnimations,\r\n       dialogsEntryAnimation, dialogsExitAnimation, fakeValidationAnimation,\r\n       showLoading, hideLoading};","import { addFunctionality, removeFunctionality } from \"../helper.mjs\"\r\nimport { fakeValidationAnimation, dialogsEntryAnimation, dialogsExitAnimation } from \"./animations.mjs\"\r\n\r\n\r\n//********************* */\r\n//* Global Variables\r\n//********************* */\r\n\r\n// settings and howToPlay dialogs\r\nconst settingsDialog = document.querySelector(\".settings-dialog\");\r\nconst howToPlayDialog = document.querySelector(\".how-to-play-dialog\");\r\n// dark mode switch and checkbox and user OS color scheme preference\r\nconst darkModeSwitch = document.querySelector(\".theme-switch\");\r\nconst checkbox = darkModeSwitch.querySelector(\".switch__checkbox\");\r\nlet userPreference = detectPreferredColorScheme();\r\n// track first theme change\r\nlet firstThemeChange = true;\r\n\r\n// all the single elements classes needed to apply dark mode\r\nconst singleElementsClasses = [\r\n  \"feedback-message\", \"header__title\", \"keyboard\", \"theme-switch\"\r\n]\r\n\r\n// all the multiple elements classes needed to apply dark mode\r\nconst singleHyphenElements = [\r\n  \"game-board__letter--missing\", \"game-board__letter--close\",\r\n  \"game-board__letter--correct\", \"keyboard__letter--missing\",\r\n  \"keyboard__letter--close\", \"keyboard__letter--correct\", \"fake-letter--missing\",\r\n  \"fake-letter--close\", \"fake-letter--correct\"\r\n];\r\n\r\nconst doubleHyphenElements = [\r\n  \"game-board__letter\", \"keyboard__letter\", \"row-separator\", \"fake-letter\",\r\n  \"subheader-text\", \"how-to-play__headings\", \"how-to-play__list\", \"loading-container\",\r\n  \"loading-spinner\", \"source-notice\"\r\n];\r\n\r\n\r\nconst multipleElementsClasses = [singleHyphenElements, doubleHyphenElements]\r\n\r\n// light and dark theme SVG elements\r\nconst lightThemeSVGs = document.body.querySelectorAll(\".light-theme__svg\");\r\nconst darkThemeSVGs = document.body.querySelectorAll(\".dark-theme__svg\");\r\n\r\n//************************************* */\r\n\r\n/*********************************\r\n  ** General dialogs Functions\r\n*********************************/\r\nfunction openDialog(dialogName) {\r\n  if (dialogName === \"settings\") {\r\n    // add dialog entry animation\r\n    dialogsEntryAnimation(settingsDialog);\r\n    // show dialog and give focus to it\r\n    settingsDialog.showModal();\r\n    settingsDialog.focus();\r\n  } else if (dialogName === \"howToPlay\") {\r\n    dialogsEntryAnimation(howToPlayDialog);\r\n\r\n    howToPlayDialog.showModal();\r\n    howToPlayDialog.focus();\r\n  }\r\n\r\n  // remove user input event listeners to prevent interaction\r\n  removeFunctionality();\r\n\r\n  // add an event listener on page for the ESC key and outside the modal box clicks\r\n  document.addEventListener(\"keydown\", handleEscKeyClick(dialogName));\r\n  document.addEventListener(\"click\", handleOutsideDialogClick(dialogName));\r\n}\r\n\r\nfunction closeDialog(dialogName) {\r\n  if (dialogName === \"settings\") {\r\n    // Get corresponding dialog button\r\n    const settingsBtn = document.body.querySelector(\".settings-btn\");\r\n    // add dialog exit animation\r\n    dialogsExitAnimation(settingsDialog);\r\n    setTimeout(() => {\r\n      // close dialog after animation duration and blur away from the button\r\n      settingsDialog.close();\r\n      settingsBtn.blur();\r\n    }, 450);\r\n  } else if (dialogName === \"howToPlay\") {\r\n    const howToPlayBtn = document.body.querySelector(\".how-to-play-btn\");\r\n    // add dialog exit animation\r\n    dialogsExitAnimation(howToPlayDialog);\r\n    // close dialog after animation duration\r\n    setTimeout(() => {\r\n      howToPlayDialog.close();\r\n      howToPlayBtn.blur();\r\n    }, 450);\r\n\r\n  }\r\n  // remove both dialog related event listeners\r\n  document.removeEventListener(\"keydown\", EscKeyDialogEvent);\r\n  document.removeEventListener(\"click\", outsideDialogAreaEvent);\r\n\r\n  // add user input event listeners to regain interactivity\r\n  addFunctionality();\r\n}\r\n\r\n/*\r\n  * this function handles the press of an ESC key if a dialog is opened\r\n*/\r\n// reference\r\nlet EscKeyDialogEvent;\r\n\r\nfunction handleEscKeyClick(dialogName) {\r\n  EscKeyDialogEvent = (ev) => {\r\n    if (ev.key === \"Escape\") {\r\n      // prevent default behavior for ESC key with modal dialogs\r\n      ev.preventDefault();\r\n      // close the dialog\r\n      closeDialog(dialogName);\r\n    }\r\n  }\r\n\r\n  return EscKeyDialogEvent;\r\n}\r\n\r\n/*\r\n  * this function handles mouse clicks outside of the dialog area\r\n*/\r\n// reference\r\nlet outsideDialogAreaEvent;\r\n\r\nfunction handleOutsideDialogClick(dialogName) {\r\n  outsideDialogAreaEvent = (ev) => {\r\n    if ((ev.target instanceof HTMLDialogElement)) {\r\n      closeDialog(dialogName);\r\n    }\r\n  }\r\n\r\n  return outsideDialogAreaEvent;\r\n}\r\n/*********************************\r\n  ** Settings dialog Functions\r\n*********************************/\r\n\r\nfunction handleSettingsButton() {\r\n  const settingsBtn = document.querySelector(\".settings-btn\");\r\n  const settingsCloseBtn = document.querySelector(\".settings-close\");\r\n\r\n  settingsBtn.addEventListener(\"click\", openSettingsEvent);\r\n  settingsCloseBtn.addEventListener(\"click\", closeSettingsEvent);\r\n}\r\n\r\nfunction openSettingsEvent() {\r\n  openDialog(\"settings\");\r\n}\r\n\r\nfunction closeSettingsEvent() {\r\n  closeDialog(\"settings\");\r\n}\r\n\r\n/****************************\r\n  ** Dark mode Functions\r\n****************************/\r\n\r\n// detect user preferred color scheme\r\nfunction detectPreferredColorScheme() {\r\n  const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\r\n\r\n  return prefersDark ? \"dark\" : \"light\";\r\n}\r\n\r\n// initial check to know if a switch to dark theme is needed based on user preference\r\nfunction initialDarkModeCheck() {\r\n  if (userPreference === \"dark\") {\r\n    // change data-theme attribute to dark mode\r\n    checkbox.setAttribute(\"data-theme\", \"dark\");\r\n    // switch to dark theme\r\n    handleThemeChange();\r\n    // track change\r\n    firstThemeChange = false;\r\n    // click checkbox for correct position of checkbox in dark mode\r\n    checkbox.click();\r\n  }\r\n}\r\n\r\n/*\r\n  * main function for the dark mode button\r\n*/\r\nfunction handleThemeButton() {\r\n  // add theme button event listener\r\n  checkbox.addEventListener(\"click\", handleThemeChange);\r\n}\r\n\r\n\r\n/*\r\n  * main event handler for the dark mode button\r\n*/\r\nfunction handleThemeChange() {\r\n  // get current theme\r\n  let currentTheme = checkbox.getAttribute(\"data-theme\");\r\n  // get single elements with single class corresponding to them\r\n  const singleElements = getSingleElements(singleElementsClasses);\r\n  // get multiple elements with single class corresponding to them\r\n  const multipleElements = getMultipleElements(multipleElementsClasses);\r\n\r\n  // if current theme is light or on first theme change\r\n  if (currentTheme === \"light\" || firstThemeChange === true) {\r\n    addDarkTheme(singleElements, multipleElements);\r\n  } else {\r\n    removeDarkTheme(singleElements, multipleElements);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n  * adding dark mode function to all needed elements\r\n*/\r\nfunction addDarkTheme(singleElements, multipleElements) {\r\n  // change checkbox current theme attribute to dark\r\n  checkbox.setAttribute(\"data-theme\", \"dark\");\r\n\r\n  // handle SVG changes\r\n  svgChanger(lightThemeSVGs, darkThemeSVGs, \"dark\");\r\n\r\n  // add theme to general elements\r\n  const body = document.body;\r\n  body.classList.add(\"body--dark\");\r\n  const header = document.body.querySelector(\"header\");\r\n  header.classList.add(\"header--dark\");\r\n  const dialogs = document.body.querySelectorAll(\"dialog\");\r\n  dialogs.forEach(dialog => {\r\n    dialog.classList.add(\"dialog--dark\");\r\n  })\r\n\r\n  // add dark mode to single elements using their class\r\n  if (singleElements.length > 0) {\r\n    handleSingleElements(singleElements, \"add\");\r\n  }\r\n\r\n  // add dark mode classes to each group of elements with a single class\r\n  if (multipleElements.length > 0) {\r\n    handleMultipleElements(multipleElements, \"add\");\r\n  }\r\n}\r\n\r\n\r\n/*\r\n  * removing dark mode function to all needed elements\r\n*/\r\nfunction removeDarkTheme(singleElements, multipleElements) {\r\n  // change checkbox current theme attribute to light\r\n  checkbox.setAttribute(\"data-theme\", \"light\");\r\n\r\n  // handle SVG changes\r\n  svgChanger(lightThemeSVGs, darkThemeSVGs, \"light\");\r\n\r\n  // remove theme to general elements\r\n  const body = document.body;\r\n  body.classList.remove(\"body--dark\");\r\n  const header = document.body.querySelector(\"header\");\r\n  header.classList.remove(\"header--dark\");\r\n  const dialogs = document.body.querySelectorAll(\"dialog\");\r\n  dialogs.forEach(dialog => {\r\n    dialog.classList.remove(\"dialog--dark\");\r\n  })\r\n\r\n  // remove dark mode to single elements using their class\r\n  if (singleElements.length > 0) {\r\n    handleSingleElements(singleElements, \"remove\");\r\n  }\r\n\r\n  // remove dark mode classes to each group of elements with a single class\r\n  if (multipleElements.length > 0) {\r\n    handleMultipleElements(multipleElements, \"remove\");\r\n  }\r\n}\r\n\r\n/*\r\n  * Function that takes an array of Elements from the DOM, and based on the method\r\n  * either adds or removes dark mode classes based on the corresponding singleElementsClasses\r\n*/\r\nfunction handleSingleElements(elements, method) {\r\n  elements.forEach(elem => {\r\n    for (let elemClass of elem.classList) {\r\n      if (singleElementsClasses.includes(elemClass)) {\r\n        if (method === \"add\") {\r\n          elem.classList.add(`${elemClass}--dark`);\r\n        } else if (method === \"remove\") {\r\n          elem.classList.remove(`${elemClass}--dark`);\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n/*\r\n  * Function that takes an array of nodeLists from the DOM, and based on the method\r\n  * either adds or removes dark mode classes based on the corresponding multipleElementsClasses\r\n*/\r\nfunction handleMultipleElements(elements, method) {\r\n  elements.forEach(group => {\r\n    // check it's not an empty nodeList\r\n    if (group.length > 0) {\r\n      group.forEach(child => {\r\n        /* \r\n          * for each element classList check for which classes he have from\r\n          * the multipleElementsClasses array\r\n        */\r\n        for (let elemClass of child.classList) {\r\n          // elements classes that needs one hyphen to apply dark mode classes\r\n          const singleHyphenArr = multipleElementsClasses[0];\r\n          // elements that needs two hyphens\r\n          const doubleHyphenArr = multipleElementsClasses[1];\r\n\r\n          if (singleHyphenArr.includes(elemClass)) {\r\n            if (method === \"add\") {\r\n              child.classList.add(`${elemClass}-dark`);\r\n            } else if (method === \"remove\") {\r\n              child.classList.remove(`${elemClass}-dark`);\r\n            }\r\n          }\r\n          else if (doubleHyphenArr.includes(elemClass)) {\r\n            if (method === \"add\") {\r\n              child.classList.add(`${elemClass}--dark`);\r\n            } else if (method === \"remove\") {\r\n              child.classList.remove(`${elemClass}--dark`);\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\n/*\r\n  * Function that takes as argument an array of class names which are associated with\r\n  * only one element, and returns an array of elements from the DOM\r\n*/\r\nfunction getSingleElements(singleElementsClasses) {\r\n  // initial array to store single elements\r\n  let singleElements = [];\r\n\r\n  // get elements\r\n  singleElementsClasses.forEach(elem => {\r\n    const element = getElement(elem);\r\n    singleElements.push(element);\r\n  })\r\n\r\n  return singleElements;\r\n}\r\n\r\n/*\r\n  * Function that takes as argument an array of class names which are associated with\r\n  * multiple elements, and returns an array of nodeLists of elements from the DOM\r\n*/\r\nfunction getMultipleElements(multipleElementsClasses) {\r\n  // initial array to store multiple elements\r\n  let multipleElements = [];\r\n\r\n  multipleElementsClasses.forEach(hyphenArr => {\r\n    hyphenArr.forEach(group => {\r\n      const elements = getElements(group);\r\n      multipleElements.push(elements);\r\n    })\r\n  })\r\n\r\n  return multipleElements;\r\n}\r\n\r\n// Function that takes a class name and returns one element from the DOM\r\nfunction getElement(elementName) {\r\n  return document.body.querySelector(`.${elementName}`);\r\n}\r\n\r\n// Function that takes a class name and returns all associated elements from the DOM\r\nfunction getElements(elementsName) {\r\n  return document.body.querySelectorAll(`.${elementsName}`);\r\n}\r\n\r\n// Function that handles SVG elements and changes them based on the current theme\r\nfunction svgChanger(lightSVGs, darkSVGs, theme) {\r\n  if (theme === \"light\") {\r\n    lightSVGs.forEach(svg => {\r\n      svg.removeAttribute(\"hidden\");\r\n    })\r\n    darkSVGs.forEach(svg => {\r\n      svg.setAttribute(\"hidden\", \"true\");\r\n    })\r\n  } else if (theme === \"dark\") {\r\n    darkSVGs.forEach(svg => {\r\n      svg.removeAttribute(\"hidden\");\r\n    })\r\n    lightSVGs.forEach(svg => {\r\n      svg.setAttribute(\"hidden\", \"true\");\r\n    })\r\n  }\r\n}\r\n\r\n/***********************************\r\n  ** how to play dialog Functions\r\n***********************************/\r\n\r\nfunction handleHowToPlayButton() {\r\n  const howToPlayBtn = document.body.querySelector(\".how-to-play-btn\");\r\n  const howToPlayCloseBtn = document.body.querySelector(\".how-to-play-close\");\r\n\r\n  howToPlayBtn.addEventListener(\"click\", openHowToPlayEvent);\r\n  howToPlayCloseBtn.addEventListener(\"click\", closeHowToPlayEvent);\r\n}\r\n\r\nfunction openHowToPlayEvent() {\r\n  // open how-to-play dialog\r\n  openDialog(\"howToPlay\");\r\n  // get fake word row in the dialog\r\n  const fakeWordRow = document.querySelector(\".fake-game-row\");\r\n  const fakeWordCells = fakeWordRow.children;\r\n  // animate the fake row when in viewport\r\n  fakeRowObserver(fakeWordRow, fakeWordCells);\r\n}\r\n\r\nfunction closeHowToPlayEvent() {\r\n  closeDialog(\"howToPlay\");\r\n}\r\n\r\n/*\r\n  * Function to observe if the fake word row in settings dialog is in viewport \r\n*/\r\nfunction fakeRowObserver(fakeWordRow, fakeWordCells) {\r\n  //* to avoid repeating animations if scrolled more than once\r\n  let observationsLeft = 1;\r\n\r\n  // the callback for observer\r\n  function fakeRowCallback(entries) {\r\n    entries.forEach((entry) => {\r\n      if (entry.isIntersecting && observationsLeft > 0) {\r\n        observationsLeft--;\r\n        fakeValidationAnimation(fakeWordCells);\r\n      }\r\n    })\r\n  }\r\n  // observer options\r\n  const intersectionOptions = {\r\n    root: null,\r\n    rootMargin: \"0px\",\r\n    threshold: 1\r\n  }\r\n  // create a new observer\r\n  const observer = new IntersectionObserver(fakeRowCallback, intersectionOptions);\r\n  // observe the fake row\r\n  observer.observe(fakeWordRow);\r\n}\r\n\r\nexport {\r\n  handleSettingsButton, handleThemeButton, handleHowToPlayButton,\r\n  initialDarkModeCheck, openDialog, fakeRowObserver\r\n};","import { feedbackMessage } from \"./validation.mjs\";\r\nimport { openDialog, fakeRowObserver } from './buttons.mjs';\r\n\r\n\r\n//****************************************************** */\r\n//* Main Functions\r\n//****************************************************** */\r\n\r\nasync function getTodayWord() {\r\n  // check if a day has passed since the last session\r\n  const isNewDay = isDayPassed();\r\n\r\n  // if first user session or a day has passed\r\n  if (localStorage.getItem(\"wordOfTheDay\") === null || isNewDay) {\r\n    // initialize a new word in local storage and return it\r\n    return await initNewWord();\r\n  } else { // if the same day\r\n    return decodeWord(localStorage.getItem(\"wordOfTheDay\"));\r\n  }\r\n}\r\n\r\n//****************************************************** */\r\n//* Helper Functions\r\n//****************************************************** */\r\nasync function initNewWord() {\r\n  // get new word\r\n  const wordOfTheDay = await requestWordOfTheDay();\r\n\r\n  localStorage.setItem(\"wordOfTheDay\", encodeWord(wordOfTheDay));\r\n\r\n  return wordOfTheDay;\r\n}\r\n\r\nasync function requestWordOfTheDay() {\r\n  const promise = fetch(\"https://words.dev-apis.com/word-of-the-day\");\r\n\r\n  return promise\r\n    .then((response) => response.json())\r\n    .then((responseObject) => responseObject.word)\r\n    .catch(() => {\r\n      feedbackMessage(`Server error 😐`, false);\r\n    })\r\n}\r\n\r\n/*\r\n  * This function compares current day vs day saved in local storage\r\n  * true => if first user session or a day has passed\r\n  * false => if still the same day\r\n*/\r\nfunction isDayPassed() {\r\n  // if first user session\r\n  const firstSession = isDayNotFound();\r\n  if (firstSession) {\r\n    // set new date key\r\n    setNewDate();\r\n    // show how to play On first user session\r\n    openDialog(\"howToPlay\");\r\n    // get fake word row in the dialog\r\n    const fakeWordRow = document.querySelector(\".fake-game-row\");\r\n    const fakeWordCells = fakeWordRow.children;\r\n    // animate the fake row when in viewport\r\n    fakeRowObserver(fakeWordRow, fakeWordCells);\r\n\r\n    return true;\r\n  } else { // on other sessions\r\n    const todayDate = getTodayDate();\r\n    // compare current day against localStorage saved day\r\n    return todayDate !== localStorage.getItem(\"currentDay\");\r\n  }\r\n}\r\n\r\n// get current day as a string \"day/month/year\" relative to GMT+0000 (UTC) => reset time for word of the day\r\nfunction getTodayDate() {\r\n  const currentDate = new Date();\r\n  const currentDay = `${currentDate.getUTCDate()}/${currentDate.getUTCMonth() + 1}/${currentDate.getUTCFullYear()}`;\r\n\r\n  return currentDay;\r\n}\r\n\r\n// Function to set a new date\r\nfunction setNewDate() {\r\n  localStorage.setItem(\"currentDay\", getTodayDate());\r\n}\r\n\r\n// Function to remove the current date from the local storage\r\nfunction removeYesterdayDate() {\r\n  localStorage.removeItem(\"currentDay\");\r\n}\r\n\r\n/*\r\n  * Function to check if a day key exists in localStorage\r\n  * if not found => return true\r\n  * otherwise => return false\r\n*/\r\nfunction isDayNotFound() {\r\n  if (localStorage.getItem(\"currentDay\") === null) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/*\r\n  * Double functions that handle scrambling the word when stored in local storage\r\n  * and unscrambling it when retrieved\r\n*/\r\n\r\nfunction encodeWord(word) {\r\n  // fake array to add additional characters from to the encoded string\r\n  const fakeHashArr = [\"!\", \"$\", \"7\", \"&\", \"?\", \"p\", \"q\", \"r\", \"/\", \"<\", \"g\", \".\", \"5\", \"i\",\r\n    \" \", \"9\", \"4\", \"-\", \")\", \"D\", \"T\", \"R\", \"{\", \"}\", \"U\", \"Z\", \"t\", \"K\", \"P\", \"~\", \";\", \"|\",\r\n    \":\", \"z\", \"V\", \"W\", \"X\", \"+\", \"=\", \"G\", \"H\", \"I\", \"@\", \"#\", \"%\", \"3\",\r\n    \">\", \"^\", \"c\", \"d\"\r\n  ];\r\n  const hashArrLen = fakeHashArr.length;\r\n\r\n  // initial value for number of letters in encoded word to each letter from original\r\n  let addedCharsForLetter = 26;\r\n  // the index at which resides the real letter\r\n  const OriginalLetterIndex = 11;\r\n  let encodedWord = \"\";\r\n\r\n  // for each letter\r\n  for (let letter of word) {\r\n    // add the additional characters\r\n    for (let i = 0; i < addedCharsForLetter; i++) {\r\n      if (i === OriginalLetterIndex) {\r\n        encodedWord += String.fromCharCode(letter.charCodeAt(0) - 64);\r\n      } else {\r\n        encodedWord += fakeHashArr[parseInt(Math.random() * 100) % hashArrLen];\r\n      }\r\n    }\r\n    // arbitrarily increment added chars for next letters\r\n    addedCharsForLetter += 17;\r\n  }\r\n  return encodedWord;\r\n}\r\n\r\nfunction decodeWord(encodedWord) {\r\n  // initial variables\r\n  let addedCharsForLetter = 26;\r\n  const OriginalLetterIndex = 11;\r\n\r\n  let decodedWord = \"\";\r\n  // array to store each chunk in encodedWord holding a letter\r\n  let letters = [];\r\n\r\n  // split encoded word until zero letters in length\r\n  while (encodedWord !== \"\") {\r\n    letters.push(encodedWord.substring(0, addedCharsForLetter))\r\n    encodedWord = encodedWord.slice(addedCharsForLetter);\r\n    addedCharsForLetter += 17;\r\n  }\r\n\r\n  // add only from the encoding key index\r\n  for (let letter of letters) {\r\n    decodedWord += String.fromCharCode(letter[OriginalLetterIndex].charCodeAt(0) + 64);\r\n  }\r\n\r\n  return decodedWord;\r\n}\r\n\r\nexport { getTodayWord, isDayPassed, setNewDate, removeYesterdayDate }"],"names":["$6ddc67a7c851817b$var$EscKeyDialogEvent","$6ddc67a7c851817b$var$outsideDialogAreaEvent","$d564d07d12776a5d$var$onKeyDownEvent","$d564d07d12776a5d$var$keyboardClickEvent","$f8d8239ac9be2ae9$var$loadingElement","document","body","querySelector","$f8d8239ac9be2ae9$export$2b30b4c5c46f02b8","rowCells","keyValue","validationArray","keyboardButtons","cellText","toLowerCase","undefined","$f8d8239ac9be2ae9$var$rejectionAnimation","row","parentNode","cell","classList","add","setTimeout","remove","$f8d8239ac9be2ae9$var$validationAnimation","i","length","keyboardButton","currentCell","button","innerText","validationCell","currentTheme","getAttribute","style","animationDelay","removeProperty","$f8d8239ac9be2ae9$var$addingAnimation","lastOccupiedCell","$f8d8239ac9be2ae9$export$5c4515537cbee0e0","pressedButton","keyLowerCased","innerHTML","$f8d8239ac9be2ae9$var$fun","console","log","$f8d8239ac9be2ae9$export$21d6af064bc42dba","dialog","$f8d8239ac9be2ae9$export$48363b365af47301","$5ab19e18f0cc9b1e$export$412508d679148d5c","key","$5ab19e18f0cc9b1e$var$animateAndRemoveLetter","$5ab19e18f0cc9b1e$var$isLetter","$5ab19e18f0cc9b1e$var$addLetter","lastEmptyCell","emptyCellText","childNodes","toUpperCase","letter","regex","test","$6ddc67a7c851817b$var$settingsDialog","$6ddc67a7c851817b$var$howToPlayDialog","$6ddc67a7c851817b$var$darkModeSwitch","$6ddc67a7c851817b$var$checkbox","$6ddc67a7c851817b$var$userPreference","$6ddc67a7c851817b$var$detectPreferredColorScheme","prefersDark","window","matchMedia","matches","$6ddc67a7c851817b$var$firstThemeChange","$6ddc67a7c851817b$var$singleElementsClasses","$6ddc67a7c851817b$var$multipleElementsClasses","$6ddc67a7c851817b$var$lightThemeSVGs","querySelectorAll","$6ddc67a7c851817b$var$darkThemeSVGs","$6ddc67a7c851817b$export$45f11db5513b93db","dialogName","showModal","focus","$d564d07d12776a5d$export$7da0d8f971993eb","addEventListener","ev","preventDefault","$6ddc67a7c851817b$var$closeDialog","target","HTMLDialogElement","settingsBtn","close","blur","howToPlayBtn","removeEventListener","$d564d07d12776a5d$export$9bcec1d37b9fc29c","$6ddc67a7c851817b$var$openSettingsEvent","$6ddc67a7c851817b$var$closeSettingsEvent","$6ddc67a7c851817b$var$handleThemeChange","singleElements","multipleElements","singleElementsClasses","forEach","elem","element","push","multipleElementsClasses","hyphenArr","group","elements","$6ddc67a7c851817b$var$addDarkTheme","setAttribute","$6ddc67a7c851817b$var$svgChanger","header","dialogs","$6ddc67a7c851817b$var$handleSingleElements","$6ddc67a7c851817b$var$handleMultipleElements","$6ddc67a7c851817b$var$removeDarkTheme","method","elemClass","includes","child","singleHyphenArr","doubleHyphenArr","lightSVGs","darkSVGs","theme","svg","removeAttribute","$6ddc67a7c851817b$var$openHowToPlayEvent","fakeWordRow","fakeWordCells","children","$6ddc67a7c851817b$export$601054c55fb8930a","$6ddc67a7c851817b$var$closeHowToPlayEvent","observationsLeft","observer","IntersectionObserver","entries","entry","isIntersecting","root","rootMargin","threshold","observe","$d6cfc0aabef0aa82$export$a5bfddfac516cc04","isNewDay","$d6cfc0aabef0aa82$export$c3e675fb255e6adf","localStorage","getItem","$d6cfc0aabef0aa82$var$initNewWord","$d6cfc0aabef0aa82$var$decodeWord","encodedWord","addedCharsForLetter","decodedWord","letters","substring","slice","String","fromCharCode","charCodeAt","wordOfTheDay","$d6cfc0aabef0aa82$var$requestWordOfTheDay","setItem","$d6cfc0aabef0aa82$var$encodeWord","word","fakeHashArr","hashArrLen","parseInt","Math","random","promise","fetch","then","response","json","responseObject","catch","$50a8fd1ed092fc9a$export$6ec214f034b61612","firstSession","$d6cfc0aabef0aa82$export$a3ec1d5da0d8ff59","todayDate","$d6cfc0aabef0aa82$var$getTodayDate","currentDate","Date","currentDay","getUTCDate","getUTCMonth","getUTCFullYear","$d564d07d12776a5d$var$keyboardContainer","$d564d07d12776a5d$var$keyboardBtns","$d564d07d12776a5d$var$handleKeyDown","$d564d07d12776a5d$var$onKeyUp","$d564d07d12776a5d$var$handleKeyboardClicks","$1cc9319a0b1861d3$export$7abfd4649f15e11f","currentRow","$d564d07d12776a5d$var$cellsChanged","currentFocusedElement","activeElement","HTMLBodyElement","contains","$50a8fd1ed092fc9a$export$e41ca8f156de93e6","clickedButton","HTMLButtonElement","HTMLImageElement","$50a8fd1ed092fc9a$var$feedbackOnScreen","message","stayOnScreen","timeOnScreen","feedbackElement","timeInSeconds","keyboardBtns","$50a8fd1ed092fc9a$var$rowCheck","rowComplete","visibility","userInput","$50a8fd1ed092fc9a$var$assembleWord","string","textContent","similarLetters","$50a8fd1ed092fc9a$var$handleValidation","dataset","state","$1cc9319a0b1861d3$export$af20da7343c4b20b","$1cc9319a0b1861d3$var$saveCellsState","rowsData","cellClasses","cellClassGenre","rowsClasses","$1cc9319a0b1861d3$var$saveKeyboardState","keyboardClassGenre","currentBtnClasses","keyboardClasses","isSolved","JSON","stringify","$50a8fd1ed092fc9a$var$compareWords","validWord","$50a8fd1ed092fc9a$var$isWord","Array","from","foundIndex","foundIndices","$50a8fd1ed092fc9a$var$findLetterIndices","wordOfTheDayLetter","currentFound","indexOf","$50a8fd1ed092fc9a$var$handleMultipleOccurrences","currentIndex","indexDifferences","Map","index","currentIndexDifference","abs","set","closestIndex","$50a8fd1ed092fc9a$var$findClosestIndex","delete","Number","$50a8fd1ed092fc9a$var$handleRemainingDifferences","differencesMap","size","minEntry","reduce","arr","diff","Infinity","request","headers","parse","$1cc9319a0b1861d3$var$initUserProgress","keyboardBtnsClasses","fill","allButtons","$1cc9319a0b1861d3$export$70a369479cdf5432","previousGameState","$1cc9319a0b1861d3$var$setPreviousCellsState","allRows","rowChildren","j","currentCellSpan","correspondingCellClass","$1cc9319a0b1861d3$var$setPreviousKeyboardState","currentBtn","btnPreviousClass","positions","todayWord","$bc7cbdf963c5cf2d$var$main","click","settingsCloseBtn","howToPlayCloseBtn","removeItem"],"version":3,"file":"index.5e019cf1.js.map"}